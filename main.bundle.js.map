{"version":3,"sources":["webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/engine.js"],"names":["element","document","querySelector","height","width","getElementById","health","constructor","this","gameBoard","castle","fieldWidth","enemies","update","bind","draw","spawnEnemy","spawnTimer","duration","onFinish","elapsed","tick","deltaTime","reset","forEach","enemy","xPos","yPos","createElement","pos","x","y","speed","selected","question","answer","classList","add","style","game","hasHitCastle","delete","transform","remove","deleteEnemy","appendChild","push","enemyToDelete","filter","render","running","rafID","undefined","accumulatedTime","currentTime","timeStep","cycle","timeStamp","requestAnimationFrame","updated","start","stop","cancelAnimationFrame"],"mappings":"mBAAA,MAMA,EANkB,CACdA,QAASC,SAASC,cAAc,eAChCC,OAAQ,IACRC,MAAO,KCIX,EAPe,CACXJ,QAASC,SAASI,eAAe,UACjCF,OAAQ,IACRC,MAAO,IACPE,OAAQ,MCAN,EAAO,ICCb,MACIC,cACIC,KAAKC,UAAY,EACjBD,KAAKE,OAAS,EAEdF,KAAKG,WAAa,QAAkB,QACpCH,KAAKI,QAAU,GAGfJ,KAAKK,OAASL,KAAKK,OAAOC,KAAKN,MAC/BA,KAAKO,KAAOP,KAAKO,KAAKD,KAAKN,MAC3BA,KAAKQ,WAAaR,KAAKQ,WAAWF,KAAKN,MAEvCA,KAAKS,WAAa,IClB1B,MACIV,YAAYW,EAAUC,GAClBX,KAAKU,SAAWA,EAChBV,KAAKW,SAAWA,EAChBX,KAAKY,QAAU,EAGnBC,KAAKC,GACDd,KAAKY,SAAWE,EAEZd,KAAKY,QAAUZ,KAAKU,WACpBV,KAAKW,WACLX,KAAKe,SAIbA,QACIf,KAAKY,QAAU,IDCa,IAAMZ,KAAKQ,YAG3CH,OAAOS,GACHd,KAAKS,WAAWI,KAAKC,GACrBd,KAAKI,QAAQY,SAASC,GAAUA,EAAMZ,OAAOL,KAAMc,KAGvDP,OACIP,KAAKI,QAAQY,SAASC,GAAUA,EAAMV,SAG1CC,aACI,MAAMS,EAAQ,IE9BtB,MACIlB,YAAYmB,EAAMC,GACdnB,KAAKR,QAAUC,SAAS2B,cAAc,OACtCpB,KAAKqB,IAAM,CAAEC,EAAGJ,EAAMK,EAAGJ,GACzBnB,KAAKJ,MAAQ,GACbI,KAAKL,OAAS,GACdK,KAAKwB,MAAQ,GACbxB,KAAKyB,UAAW,EAChBzB,KAAK0B,SAAW,GAChB1B,KAAK2B,OAAS,GAGd3B,KAAKR,QAAQoC,UAAUC,IAAI,SAC3B7B,KAAKR,QAAQsC,MAAMlC,MAAQ,GAAGI,KAAKJ,UACnCI,KAAKR,QAAQsC,MAAMnC,OAAS,GAAGK,KAAKL,WAGxCU,OAAO0B,EAAMjB,GACLd,KAAKgC,aAAaD,GAClB/B,KAAKiC,OAAOF,GAMhB/B,KAAKqB,IAAIC,GAAKtB,KAAKwB,OAASV,EAAY,KAG5CP,OAEIP,KAAKR,QAAQsC,MAAMI,UAAY,aAAalC,KAAKqB,IAAIC,QAAQtB,KAAKqB,IAAIE,OAG1EU,OAAOF,GAEH/B,KAAKR,QAAQ2C,SAEbJ,EAAKK,YAAYpC,MAGrBgC,aAAaD,GACT,OAAO/B,KAAKqB,IAAIC,GAAKS,EAAK5B,WAAaH,KAAKJ,QFXpB,EAAG,KAC3BI,KAAKC,UAAUT,QAAQ6C,YAAYpB,EAAMzB,SACzCQ,KAAKI,QAAQkC,KAAKrB,GAGtBmB,YAAYG,GACRvC,KAAKI,QAAUJ,KAAKI,QAAQoC,QAAQvB,GAAUA,IAAUsB,MDhCjD,IILf,MACIxC,YAAYM,EAAQoC,GAChBzC,KAAK0C,SAAU,EACf1C,KAAK2C,WAAQC,EAEb5C,KAAKK,OAASA,EACdL,KAAKO,KAAOkC,EAEZzC,KAAK6C,gBAAkB,EACvB7C,KAAK8C,YAAc,EACnB9C,KAAK+C,SAAW,IAAO,GAEvB/C,KAAKgD,MAAQhD,KAAKgD,MAAM1C,KAAKN,MAGjCgD,MAAMC,GACFjD,KAAK2C,MAAQO,sBAAsBlD,KAAKgD,OAExChD,KAAK6C,iBAAmBI,EAAYjD,KAAK8C,YACzC9C,KAAK8C,YAAcG,EAEnB,IAAIE,GAAU,EAMd,IAJInD,KAAK6C,gBAAkB,KACvB7C,KAAK6C,gBAAkB7C,KAAK+C,UAGzB/C,KAAK6C,iBAAmB7C,KAAK+C,UAChC/C,KAAKK,OAAOL,KAAK+C,UAEjBI,GAAU,EAEVnD,KAAK6C,iBAAmB7C,KAAK+C,SAG7BI,GAASnD,KAAKO,OAGtB6C,QACIpD,KAAK0C,SAAU,EACf1C,KAAK2C,MAAQO,sBAAsBlD,KAAKgD,OAG5CK,OACIrD,KAAK0C,SAAU,EACfY,qBAAqBtD,KAAK2C,SJxCR,EAAKtC,OAAQ,EAAKE,MAErC6C,S","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    element: document.getElementById('castle'),\n    height: 400,\n    width: 200,\n    health: null,\n};\n\nexport default castle;\n","import './styles/styles.css';\nimport Game from './modules/game';\nimport Engine from './modules/engine';\n\nconst game = new Game();\nconst engine = new Engine(game.update, game.draw);\n\nengine.start();\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n\n        // bind methods 'this' to Game class\n        this.update = this.update.bind(this);\n        this.draw = this.draw.bind(this);\n        this.spawnEnemy = this.spawnEnemy.bind(this);\n\n        this.spawnTimer = new Timer(2000, this.spawnEnemy);\n    }\n\n    update(deltaTime) {\n        this.spawnTimer.tick(deltaTime);\n        this.enemies.forEach((enemy) => enemy.update(this, deltaTime));\n    }\n\n    draw() {\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemy = new Enemy(0, 150);\n        this.gameBoard.element.appendChild(enemy.element);\n        this.enemies.push(enemy);\n    }\n\n    deleteEnemy(enemyToDelete) {\n        this.enemies = this.enemies.filter((enemy) => enemy !== enemyToDelete);\n    }\n}\n\nexport default Game;\n","class Timer {\n    constructor(duration, onFinish) {\n        this.duration = duration;\n        this.onFinish = onFinish;\n        this.elapsed = 0;\n    }\n\n    tick(deltaTime) {\n        this.elapsed += deltaTime;\n\n        if (this.elapsed > this.duration) {\n            this.onFinish();\n            this.reset();\n        }\n    }\n\n    reset() {\n        this.elapsed = 0;\n    }\n}\n\nexport default Timer;\n","// enemy class\nclass Enemy {\n    constructor(xPos, yPos) {\n        this.element = document.createElement('div');\n        this.pos = { x: xPos, y: yPos };\n        this.width = 50;\n        this.height = 50;\n        this.speed = 60; // px per second\n        this.selected = false; // default false (not selected)\n        this.question = '';\n        this.answer = '';\n\n        // setting some enemy css\n        this.element.classList.add('enemy');\n        this.element.style.width = `${this.width}px`;\n        this.element.style.height = `${this.height}px`;\n    }\n\n    update(game, deltaTime) {\n        if (this.hasHitCastle(game)) {\n            this.delete(game);\n            return;\n        }\n\n        // multiply speed by deltaTime in seconds for consistent movement across\n        // different framerates\n        this.pos.x += this.speed * (deltaTime / 1000);\n    }\n\n    draw() {\n        // draw the enemy to different position\n        this.element.style.transform = `translate(${this.pos.x}px, ${this.pos.y}px)`;\n    }\n\n    delete(game) {\n        // remove enemy from game-board\n        this.element.remove();\n        // remove enemy from enemies array\n        game.deleteEnemy(this);\n    }\n\n    hasHitCastle(game) {\n        return this.pos.x >= game.fieldWidth - this.width;\n    }\n}\n\nexport default Enemy;\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n"],"sourceRoot":""}