{"version":3,"sources":["webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/modules/questionGenerator.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/engine.js"],"names":["element","document","querySelector","height","width","lives","elements","container","getElementById","livesText","game","undefined","setup","this","draw","damage","amount","gameOver","textContent","Math","max","operatorDifficulty","easy","medium","hard","insane","wholeNumberGenerator","number","floor","random","questionNumberGenerator","difficulty","generateDifficulty","operator","length","indexOperatorGenerator","operatorSelector","number1","number2","questionText","text","answer","question","questionArr","split","num1","Number","num2","answerQuestion","POSITION","firstLane","secondLane","thirdLane","enemySpeed","startPage","gamePage","gameOverPage","constructor","gameBoard","castle","answerForm","answerInput","fieldWidth","enemies","gameState","update","bind","spawnEnemy","handleAnswerSubmit","spawnTimer","duration","onFinish","elapsed","tick","deltaTime","reset","start","addEventListener","style","display","zIndex","forEach","enemy","xPos","yPos","speed","createElement","pos","x","y","selected","classList","add","appendChild","unSelect","select","focus","selectedEnemy","find","remove","hasHitCastle","delete","transform","deleteEnemy","randomLane","push","keys","Object","enemyToDelete","filter","value","event","preventDefault","correctAnswer","toString","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","timeStamp","requestAnimationFrame","updated","stop","cancelAnimationFrame","startButton","restartButton","startGame"],"mappings":"mBAAA,MAMA,EANkB,CACdA,QAASC,SAASC,cAAc,eAChCC,OAAQ,IACRC,MAAO,KCyBX,EA5Be,CACXD,OAAQ,IACRC,MAAO,IACPC,MAAO,KACPC,SAAU,CACNC,UAAWN,SAASO,eAAe,UACnCC,UAAWR,SAASO,eAAe,iBAEvCE,UAAMC,EAENC,MAAMF,EAAML,GACRQ,KAAKH,KAAOA,EACZG,KAAKR,MAAQA,EACbQ,KAAKC,QAGTC,OAAOC,GACHH,KAAKR,OAASW,EACdH,KAAKC,OAEc,IAAfD,KAAKR,OAAaQ,KAAKH,KAAKO,YAGpCH,OACID,KAAKP,SAASG,UAAUS,YAAcC,KAAKC,IAAI,EAAGP,KAAKR,SCtBzDgB,EAAqB,CACvBC,KAAM,CAAC,IAAK,KACZC,OAAQ,CAAC,IAAK,IAAK,KACnBC,KAAM,CAAC,IAAK,IAAK,KACjBC,OAAQ,CAAC,IAAK,IAAK,IAAU,MAG3BC,EAAwBC,GAAWR,KAAKS,MAAMT,KAAKU,SAAWF,GAwB9DG,EAA2BC,GAC7BL,EAtBuB,CAACK,IACxB,OAAQA,GACJ,IAAK,OACD,OAAO,EACX,IAAK,SACD,OAAO,GACX,IAAK,OACD,OAAO,GACX,IAAK,SACD,OAAO,IACX,QACI,OAAO,IAWMC,CAAmBD,IAAe,EAqE3D,EAjD2BA,IACvB,MAAME,EAzBe,CAACF,GACtBV,EAAmBU,GAJQ,CAACA,GAC5BL,EAAqBL,EAAmBU,GAAYG,QAGrBC,CAAuBJ,IAwBrCK,CAAiBL,GAClC,IAAIM,EAAUP,EAAwBC,GAClCO,EAAUR,EAAwBC,GAEtC,KAAoB,MAAbE,GACCI,EAAUC,GAAY,GACtBD,EAAUP,EAAwBC,GAClCO,EAAUR,EAAwBC,GAK1C,KAAoB,MAAbE,GACCI,EAAUC,EAAU,GACpBD,EAAUP,EAAwBC,GAClCO,EAAUR,EAAwBC,GAM1C,KAAoB,MAAbE,GACCI,EAAUC,EAAU,KACpBD,EAAUP,EAAwBC,GAClCO,EAAUR,EAAwBC,GAM1C,KAAoB,MAAbE,GACCI,EAAUC,EAAU,KACpBD,EAAUP,EAAwBC,GAClCO,EAAUR,EAAwBC,GAM1C,MAAMQ,EAAe,GAAGF,KAAWJ,KAAYK,IAG/C,MAAO,CACHE,KAAMD,EACNE,OA/De,CAACC,IACpB,MAAMC,EAAcD,EAASE,MAAM,KAC7BC,EAAOC,OAAOH,EAAY,IAC1BV,EAAWU,EAAY,GACvBI,EAAOD,OAAOH,EAAY,IAChC,IAAIF,EAUJ,OARIA,EADa,MAAbR,EACSY,EAAOE,EACI,MAAbd,EACEY,EAAOE,EACI,MAAbd,EACEY,EAAOE,EAEPF,EAAOE,EAEbN,GA4CQO,CAAeT,KCnF5BU,EAAW,CACbC,UAAW,GACXC,WAAY,IACZC,UAAW,KAGf,IAAIC,EAAa,GACjB,MAAMC,EAAYrD,SAASO,eAAe,cACpC+C,EAAWtD,SAASO,eAAe,aACnCgD,EAAevD,SAASO,eAAe,kBCjBvC,EAAO,IDmBb,MACIiD,cACI5C,KAAK6C,UAAY,EACjB7C,KAAK8C,OAAS,EACd9C,KAAK+C,WAAa3D,SAASC,cAAc,gBACzCW,KAAKgD,YAAc5D,SAASC,cAAc,iBAE1CW,KAAKiD,WAAa,QAAkB,QACpCjD,KAAKkD,QAAU,GACflD,KAAKmD,UAzBH,EA4BFnD,KAAKoD,OAASpD,KAAKoD,OAAOC,KAAKrD,MAC/BA,KAAKC,KAAOD,KAAKC,KAAKoD,KAAKrD,MAC3BA,KAAKsD,WAAatD,KAAKsD,WAAWD,KAAKrD,MACvCA,KAAKuD,mBAAqBvD,KAAKuD,mBAAmBF,KAAKrD,MAGvDA,KAAKwD,WAAa,IEzC1B,MACIZ,YAAYa,EAAUC,GAClB1D,KAAKyD,SAAWA,EAChBzD,KAAK0D,SAAWA,EAChB1D,KAAK2D,QAAU,EAGnBC,KAAKC,GACD7D,KAAK2D,SAAWE,EAEZ7D,KAAK2D,QAAU3D,KAAKyD,WACpBzD,KAAK0D,WACL1D,KAAK8D,SAIbA,QACI9D,KAAK2D,QAAU,IFwBa,KAAM3D,KAAKsD,YAG3CS,QACI/D,KAAK8C,OAAO/C,MAAMC,KAAM,GACxBA,KAAK+C,WAAWiB,iBAAiB,SAAUhE,KAAKuD,oBAChDvD,KAAKmD,UAvCA,EAyCLV,EAAUwB,MAAMC,QAAU,OAC1BzB,EAAUwB,MAAME,QAAU,EAC1BxB,EAAasB,MAAMC,QAAU,OAC7BxB,EAASuB,MAAMC,QAAU,OAG7Bd,OAAOS,GA/CE,IAgDD7D,KAAKmD,YAETnD,KAAKwD,WAAWI,KAAKC,GACrB7D,KAAKkD,QAAQkB,SAASC,GAAUA,EAAMjB,OAAOpD,KAAM6D,MAGvD5D,OACID,KAAKkD,QAAQkB,SAASC,GAAUA,EAAMpE,SAG1CqD,aACI,MAAMe,EAAQ,IGnEtB,MACIzB,YAAY0B,EAAMC,EAAM1E,EAAMgC,EAAU2C,GACpCxE,KAAKP,SAAW,CACZ4E,MAAOjF,SAASqF,cAAc,OAC9B5C,SAAUzC,SAASqF,cAAc,QAGrCzE,KAAK0E,IAAM,CAAEC,EAAGL,EAAMM,EAAGL,GACzBvE,KAAKT,MAAQ,GACbS,KAAKV,OAAS,GACdU,KAAKwE,MAAQA,EACbxE,KAAK6E,UAAW,EAChB7E,KAAK6B,SAAWA,EAChB7B,KAAKH,KAAOA,EAGZG,KAAKP,SAAS4E,MAAMS,UAAUC,IAAI,SAClC/E,KAAKP,SAAS4E,MAAMJ,MAAM1E,MAAQ,GAAGS,KAAKT,UAC1CS,KAAKP,SAAS4E,MAAMJ,MAAM3E,OAAS,GAAGU,KAAKV,WAG3CU,KAAKP,SAASoC,SAASiD,UAAUC,IAAI,kBACrC/E,KAAKP,SAASoC,SAASxB,YAAcL,KAAK6B,SAASF,KACnD3B,KAAKP,SAAS4E,MAAMW,YAAYhF,KAAKP,SAASoC,UAG9C7B,KAAKP,SAAS4E,MAAML,iBAAiB,SAAS,KAC1ChE,KAAKiF,WACLjF,KAAKkF,SACLlF,KAAKH,KAAKmD,YAAYmC,WAI9BD,SAEIlF,KAAK6E,UAAW,EACZ7E,KAAK6E,UACL7E,KAAKP,SAAS4E,MAAMS,UAAUC,IAAI,YAI1CE,WAEI,MACMG,EADapF,KAAKH,KAAKqD,QACImC,MAAMhB,GAAUA,EAAMQ,gBACjC/E,IAAlBsF,IACJA,EAAcP,UAAW,EACzBO,EAAc3F,SAAS4E,MAAMS,UAAUQ,OAAO,aAGlDlC,OAAOvD,EAAMgE,GACT,GAAI7D,KAAKuF,aAAa1F,GAGlB,OAFAG,KAAKwF,OAAO3F,QACZA,EAAKiD,OAAO5C,OAAO,GAMvBF,KAAK0E,IAAIC,GAAK3E,KAAKwE,OAASX,EAAY,KAG5C5D,OAEID,KAAKP,SAAS4E,MAAMJ,MAAMwB,UAAY,aAAazF,KAAK0E,IAAIC,QAAQ3E,KAAK0E,IAAIE,OAGjFY,SAEIxF,KAAKP,SAAS4E,MAAMiB,SAEpBtF,KAAKH,KAAK6F,YAAY1F,MAG1BuF,aAAa1F,GACT,OAAOG,KAAK0E,IAAIC,GAAK9E,EAAKoD,WAAajD,KAAKT,QHPxC,EACAS,KAAK2F,aACL3F,KACA,EAAkB,UAClBwC,GAEJA,GAAc,EACdxC,KAAK6C,UAAU1D,QAAQ6F,YAAYX,EAAM5E,SAAS4E,OAClDrE,KAAKkD,QAAQ0C,KAAKvB,GAItBsB,aAEI,MAAME,EAAOC,OAAOD,KAAKzD,GACzB,OAAOA,EAASyD,EAAKvF,KAAKS,MAAMT,KAAKU,SAAW6E,EAAKxE,UAGzDqE,YAAYK,GACR/F,KAAKkD,QAAUlD,KAAKkD,QAAQ8C,QAAQ3B,GAAUA,IAAU0B,IAG5D3F,WACIJ,KAAKmD,UAlFC,EAmFNT,EAASuB,MAAMC,QAAU,OACzBvB,EAAasB,MAAMC,QAAU,OAC7BlE,KAAKkD,QAAQkB,SAASC,IAClBA,EAAMmB,YAEVxF,KAAKgD,YAAYiD,MAAQ,GACzBzD,EAAa,GAGjBe,mBAAmB2C,GACfA,EAAMC,iBAEN,MAAMf,EAAgBpF,KAAKkD,QAAQmC,MAAMhB,GAAUA,EAAMQ,WACzD,IAAKO,EAAe,OAEpB,MAAMgB,EAAgBhB,EAAcvD,SAASD,OAAOyE,WACjCrG,KAAKgD,YAAYiD,QAEjBG,GAAehB,EAAcI,OAAOxF,MAEvDA,KAAKgD,YAAYiD,MAAQ,KC3G3B,EAAS,IGLf,MACIrD,YAAYQ,EAAQkD,GAChBtG,KAAKuG,SAAU,EACfvG,KAAKwG,WAAQ1G,EAEbE,KAAKoD,OAASA,EACdpD,KAAKC,KAAOqG,EAEZtG,KAAKyG,gBAAkB,EACvBzG,KAAK0G,YAAc,EACnB1G,KAAK2G,SAAW,IAAO,GAEvB3G,KAAK4G,MAAQ5G,KAAK4G,MAAMvD,KAAKrD,MAGjC4G,MAAMC,GACF7G,KAAKwG,MAAQM,sBAAsB9G,KAAK4G,OAExC5G,KAAKyG,iBAAmBI,EAAY7G,KAAK0G,YACzC1G,KAAK0G,YAAcG,EAEnB,IAAIE,GAAU,EAMd,IAJI/G,KAAKyG,gBAAkB,KACvBzG,KAAKyG,gBAAkBzG,KAAK2G,UAGzB3G,KAAKyG,iBAAmBzG,KAAK2G,UAChC3G,KAAKoD,OAAOpD,KAAK2G,UAEjBI,GAAU,EAEV/G,KAAKyG,iBAAmBzG,KAAK2G,SAG7BI,GAAS/G,KAAKC,OAGtB8D,QACI/D,KAAKuG,SAAU,EACfvG,KAAKwG,MAAQM,sBAAsB9G,KAAK4G,OAG5CI,OACIhH,KAAKuG,SAAU,EACfU,qBAAqBjH,KAAKwG,SHxCR,EAAKpD,OAAQ,EAAKnD,MAEtCiH,EAAc9H,SAASC,cAAc,iBACrC8H,EAAgB/H,SAASC,cAAc,mBAE7C,SAAS+H,IACL,EAAOrD,QACP,EAAKA,QASTmD,EAAYlD,iBAAiB,QAASoD,GACtCD,EAAcnD,iBAAiB,QAASoD,I","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    height: 400,\n    width: 200,\n    lives: null,\n    elements: {\n        container: document.getElementById('castle'),\n        livesText: document.getElementById('castle-lives'),\n    },\n    game: undefined,\n\n    setup(game, lives) {\n        this.game = game;\n        this.lives = lives;\n        this.draw();\n    },\n\n    damage(amount) {\n        this.lives -= amount;\n        this.draw();\n\n        if (this.lives === 0) this.game.gameOver();\n    },\n\n    draw() {\n        this.elements.livesText.textContent = Math.max(0, this.lives);\n    },\n};\n\nexport default castle;\n","// \\u2A09 is the unicode symbol for multiplication and \\u00F7 for division in Javascript.\n\nconst operatorDifficulty = {\n    easy: ['+', '-'],\n    medium: ['+', '-', '\\u2A09'],\n    hard: ['+', '-', '\\u2A09'],\n    insane: ['+', '-', '\\u2A09', '\\u00F7'],\n};\n\nconst wholeNumberGenerator = (number) => Math.floor(Math.random() * number);\n\n// Change difficulty here as this is the factor of multiplication that determines range of numbers.\nconst generateDifficulty = (difficulty) => {\n    switch (difficulty) {\n        case 'easy':\n            return 5;\n        case 'medium':\n            return 10;\n        case 'hard':\n            return 30;\n        case 'insane':\n            return 100;\n        default:\n            return 5;\n    }\n};\n\nconst indexOperatorGenerator = (difficulty) =>\n    wholeNumberGenerator(operatorDifficulty[difficulty].length);\n\nconst operatorSelector = (difficulty) =>\n    operatorDifficulty[difficulty][indexOperatorGenerator(difficulty)];\n\nconst questionNumberGenerator = (difficulty) =>\n    wholeNumberGenerator(generateDifficulty(difficulty)) + 1;\n\nconst answerQuestion = (question) => {\n    const questionArr = question.split(' ');\n    const num1 = Number(questionArr[0]);\n    const operator = questionArr[1];\n    const num2 = Number(questionArr[2]);\n    let answer;\n    if (operator === '+') {\n        answer = num1 + num2;\n    } else if (operator === '-') {\n        answer = num1 - num2;\n    } else if (operator === '\\u2A09') {\n        answer = num1 * num2;\n    } else {\n        answer = num1 / num2;\n    }\n    return answer;\n};\n\nconst questionGenerator = (difficulty) => {\n    const operator = operatorSelector(difficulty);\n    let number1 = questionNumberGenerator(difficulty);\n    let number2 = questionNumberGenerator(difficulty);\n    // Functions that will determine question difficulty\n    while (operator === '\\u00F7'){\n        if (number1 % number2 !== 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n    while (operator === '-'){\n        if (number1 - number2 < 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '\\u2A09'){\n        if (number1 * number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '+'){\n        if (number1 + number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    const questionText = `${number1} ${operator} ${number2}`;\n    const answer = answerQuestion(questionText);\n\n    return {\n        text: questionText,\n        answer,\n    };\n};\n\nexport default questionGenerator;\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\nimport questionGenerator from './questionGenerator';\n\nconst GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    GAMEOVER: 2,\n};\n\nconst POSITION = {\n    firstLane: 50,\n    secondLane: 165,\n    thirdLane: 280,\n};\n\nlet enemySpeed = 40;\nconst startPage = document.getElementById('start-page');\nconst gamePage = document.getElementById('game-page');\nconst gameOverPage = document.getElementById('game-over-page');\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        this.answerForm = document.querySelector('.answer-form');\n        this.answerInput = document.querySelector('#answer-input');\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n        this.gameState = GAMESTATE.MENU;\n\n        // bind methods 'this' to Game class\n        this.update = this.update.bind(this);\n        this.draw = this.draw.bind(this);\n        this.spawnEnemy = this.spawnEnemy.bind(this);\n        this.handleAnswerSubmit = this.handleAnswerSubmit.bind(this);\n\n        // spawn enemy every 2.5 seconds\n        this.spawnTimer = new Timer(2500, this.spawnEnemy);\n    }\n\n    start() {\n        this.castle.setup(this, 3);\n        this.answerForm.addEventListener('submit', this.handleAnswerSubmit);\n        this.gameState = GAMESTATE.RUNNING;\n        // hide start page\n        startPage.style.display = 'none';\n        startPage.style.zIndex = -1;\n        gameOverPage.style.display = 'none';\n        gamePage.style.display = 'flex';\n    }\n\n    update(deltaTime) {\n        if (this.gameState !== GAMESTATE.RUNNING) return;\n\n        this.spawnTimer.tick(deltaTime);\n        this.enemies.forEach((enemy) => enemy.update(this, deltaTime));\n    }\n\n    draw() {\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemy = new Enemy(\n            0,\n            this.randomLane(),\n            this,\n            questionGenerator('insane'),\n            enemySpeed\n        );\n        enemySpeed += 3;\n        this.gameBoard.element.appendChild(enemy.elements.enemy);\n        this.enemies.push(enemy);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    randomLane() {\n        // randomly choose an object keys in the POSITION object\n        const keys = Object.keys(POSITION);\n        return POSITION[keys[Math.floor(Math.random() * keys.length)]];\n    }\n\n    deleteEnemy(enemyToDelete) {\n        this.enemies = this.enemies.filter((enemy) => enemy !== enemyToDelete);\n    }\n\n    gameOver() {\n        this.gameState = GAMESTATE.GAMEOVER;\n        gamePage.style.display = 'none';\n        gameOverPage.style.display = 'flex';\n        this.enemies.forEach((enemy) => {\n            enemy.delete();\n        });\n        this.answerInput.value = '';\n        enemySpeed = 40;\n    }\n\n    handleAnswerSubmit(event) {\n        event.preventDefault();\n\n        const selectedEnemy = this.enemies.find((enemy) => enemy.selected);\n        if (!selectedEnemy) return;\n\n        const correctAnswer = selectedEnemy.question.answer.toString();\n        const userAnswer = this.answerInput.value;\n\n        if (userAnswer === correctAnswer) selectedEnemy.delete(this);\n\n        this.answerInput.value = '';\n    }\n}\n\nexport default Game;\n","import './styles/styles.css';\nimport Game from './modules/game';\nimport Engine from './modules/engine';\n\nconst game = new Game();\nconst engine = new Engine(game.update, game.draw);\n\nconst startButton = document.querySelector('.start-button');\nconst restartButton = document.querySelector('.restart-button');\n\nfunction startGame() {\n    engine.start();\n    game.start();\n}\n\n// function restartGame() {\n//     game = new Game();\n//     //  engine = new Engine(game.update, game.draw);\n//     game.start();\n// }\n\nstartButton.addEventListener('click', startGame);\nrestartButton.addEventListener('click', startGame);\n","class Timer {\n    constructor(duration, onFinish) {\n        this.duration = duration;\n        this.onFinish = onFinish;\n        this.elapsed = 0;\n    }\n\n    tick(deltaTime) {\n        this.elapsed += deltaTime;\n\n        if (this.elapsed > this.duration) {\n            this.onFinish();\n            this.reset();\n        }\n    }\n\n    reset() {\n        this.elapsed = 0;\n    }\n}\n\nexport default Timer;\n","class Enemy {\n    constructor(xPos, yPos, game, question, speed) {\n        this.elements = {\n            enemy: document.createElement('div'),\n            question: document.createElement('div'),\n        };\n\n        this.pos = { x: xPos, y: yPos };\n        this.width = 50;\n        this.height = 50;\n        this.speed = speed; // px per second\n        this.selected = false; // default false (not selected)\n        this.question = question;\n        this.game = game;\n\n        // setting some enemy css\n        this.elements.enemy.classList.add('enemy');\n        this.elements.enemy.style.width = `${this.width}px`;\n        this.elements.enemy.style.height = `${this.height}px`;\n\n        // question element styles\n        this.elements.question.classList.add('enemy-question');\n        this.elements.question.textContent = this.question.text;\n        this.elements.enemy.appendChild(this.elements.question);\n\n        // set enemy selected\n        this.elements.enemy.addEventListener('click', () => {\n            this.unSelect();\n            this.select();\n            this.game.answerInput.focus();\n        });\n    }\n\n    select() {\n        // select clicked enemy\n        this.selected = true;\n        if (this.selected) {\n            this.elements.enemy.classList.add('selected');\n        }\n    }\n\n    unSelect() {\n        // remove all selected class and attribute in order to make only one selection\n        const enemiesArr = this.game.enemies;\n        const selectedEnemy = enemiesArr.find((enemy) => enemy.selected);\n        if (selectedEnemy === undefined) return;\n        selectedEnemy.selected = false;\n        selectedEnemy.elements.enemy.classList.remove('selected');\n    }\n\n    update(game, deltaTime) {\n        if (this.hasHitCastle(game)) {\n            this.delete(game);\n            game.castle.damage(1);\n            return;\n        }\n\n        // multiply speed by deltaTime in seconds for consistent movement across\n        // different framerates\n        this.pos.x += this.speed * (deltaTime / 1000);\n    }\n\n    draw() {\n        // draw the enemy to different position\n        this.elements.enemy.style.transform = `translate(${this.pos.x}px, ${this.pos.y}px)`;\n    }\n\n    delete() {\n        // remove enemy from game-board\n        this.elements.enemy.remove();\n        // remove enemy from enemies array\n        this.game.deleteEnemy(this);\n    }\n\n    hasHitCastle(game) {\n        return this.pos.x >= game.fieldWidth - this.width;\n    }\n}\n\nexport default Enemy;\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n"],"sourceRoot":""}