{"version":3,"sources":["webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/modules/questionGenerator.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/engine.js"],"names":["element","document","querySelector","height","width","lives","elements","container","getElementById","livesText","game","undefined","setup","this","draw","damage","amount","gameOver","textContent","Math","max","operatorDifficulty","easy","medium","hard","insane","wholeNumberGenerator","number","floor","random","questionNumberGenerator","difficulty","generateDifficulty","operator","length","indexOperatorGenerator","operatorSelector","number1","number2","questionText","text","answer","question","questionArr","split","num1","Number","num2","answerQuestion","POSITION","firstLane","secondLane","thirdLane","enemySpeed","constructor","gameBoard","castle","answerForm","answerInput","fieldWidth","enemies","gameState","update","bind","spawnEnemy","handleAnswerSubmit","spawnTimer","duration","onFinish","elapsed","tick","deltaTime","reset","start","addEventListener","forEach","enemy","xPos","yPos","speed","createElement","pos","x","y","selected","classList","add","style","appendChild","unSelect","select","focus","selectedEnemy","find","remove","hasHitCastle","delete","transform","deleteEnemy","randomLane","push","keys","Object","enemyToDelete","filter","event","preventDefault","correctAnswer","toString","value","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","timeStamp","requestAnimationFrame","updated","stop","cancelAnimationFrame"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    height: 400,\n    width: 200,\n    lives: 3,\n    elements: {\n        container: document.getElementById('castle'),\n        livesText: document.getElementById('castle-lives'),\n    },\n    game: undefined,\n\n    setup(game) {\n        this.game = game;\n        this.draw();\n    },\n\n    damage(amount) {\n        this.lives -= amount;\n        this.draw();\n\n        if (this.lives === 0) this.game.gameOver();\n    },\n\n    draw() {\n        this.elements.livesText.textContent = Math.max(0, this.lives);\n    },\n};\n\nexport default castle;\n","// \\u2A09 is the unicode symbol for multiplication and \\u00F7 for division in Javascript.\n\nconst operatorDifficulty = {\n    easy: ['+', '-'],\n    medium: ['+', '-', '\\u2A09'],\n    hard: ['+', '-', '\\u2A09'],\n    insane: ['+', '-', '\\u2A09', '\\u00F7'],\n};\n\nconst wholeNumberGenerator = (number) => Math.floor(Math.random() * number);\n\n// Change difficulty here as this is the factor of multiplication that determines range of numbers.\nconst generateDifficulty = (difficulty) => {\n    switch (difficulty) {\n        case 'easy':\n            return 5;\n        case 'medium':\n            return 10;\n        case 'hard':\n            return 30;\n        case 'insane':\n            return 100;\n        default:\n            return 5;\n    }\n};\n\nconst indexOperatorGenerator = (difficulty) =>\n    wholeNumberGenerator(operatorDifficulty[difficulty].length);\n\nconst operatorSelector = (difficulty) =>\n    operatorDifficulty[difficulty][indexOperatorGenerator(difficulty)];\n\nconst questionNumberGenerator = (difficulty) =>\n    wholeNumberGenerator(generateDifficulty(difficulty)) + 1;\n\nconst answerQuestion = (question) => {\n    const questionArr = question.split(' ');\n    const num1 = Number(questionArr[0]);\n    const operator = questionArr[1];\n    const num2 = Number(questionArr[2]);\n    let answer;\n    if (operator === '+') {\n        answer = num1 + num2;\n    } else if (operator === '-') {\n        answer = num1 - num2;\n    } else if (operator === '\\u2A09') {\n        answer = num1 * num2;\n    } else {\n        answer = num1 / num2;\n    }\n    return answer;\n};\n\nconst questionGenerator = (difficulty) => {\n    const operator = operatorSelector(difficulty);\n    let number1 = questionNumberGenerator(difficulty);\n    let number2 = questionNumberGenerator(difficulty);\n    // Functions that will determine question difficulty\n    while (operator === '\\u00F7'){\n        if (number1 % number2 !== 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n    while (operator === '-'){\n        if (number1 - number2 < 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '\\u2A09'){\n        if (number1 * number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '+'){\n        if (number1 + number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    const questionText = `${number1} ${operator} ${number2}`;\n    const answer = answerQuestion(questionText);\n\n    return {\n        text: questionText,\n        answer,\n    };\n};\n\nexport default questionGenerator;\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\nimport questionGenerator from './questionGenerator';\n\nconst GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    GAMEOVER: 2,\n};\n\nconst POSITION = {\n    firstLane: 50,\n    secondLane: 165,\n    thirdLane: 280,\n};\n\nlet enemySpeed = 40;\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        this.answerForm = document.querySelector('.answer-form');\n        this.answerInput = document.querySelector('#answer-input');\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n        this.gameState = GAMESTATE.MENU;\n\n        // bind methods 'this' to Game class\n        this.update = this.update.bind(this);\n        this.draw = this.draw.bind(this);\n        this.spawnEnemy = this.spawnEnemy.bind(this);\n        this.handleAnswerSubmit = this.handleAnswerSubmit.bind(this);\n\n        // spawn enemy every 2.5 seconds\n        this.spawnTimer = new Timer(2500, this.spawnEnemy);\n    }\n\n    start() {\n        this.castle.setup(this);\n        this.answerForm.addEventListener('submit', this.handleAnswerSubmit);\n        this.gameState = GAMESTATE.RUNNING;\n    }\n\n    update(deltaTime) {\n        if (this.gameState !== GAMESTATE.RUNNING) return;\n\n        this.spawnTimer.tick(deltaTime);\n        this.enemies.forEach((enemy) => enemy.update(this, deltaTime));\n    }\n\n    draw() {\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemy = new Enemy(\n            0,\n            this.randomLane(),\n            this,\n            questionGenerator('insane'),\n            enemySpeed\n        );\n        enemySpeed += 3;\n        this.gameBoard.element.appendChild(enemy.elements.enemy);\n        this.enemies.push(enemy);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    randomLane() {\n        // randomly choose an object keys in the POSITION object\n        const keys = Object.keys(POSITION);\n        return POSITION[keys[Math.floor(Math.random() * keys.length)]];\n    }\n\n    deleteEnemy(enemyToDelete) {\n        this.enemies = this.enemies.filter((enemy) => enemy !== enemyToDelete);\n    }\n\n    gameOver() {\n        this.gameState = GAMESTATE.GAMEOVER;\n    }\n\n    handleAnswerSubmit(event) {\n        event.preventDefault();\n\n        const selectedEnemy = this.enemies.find((enemy) => enemy.selected);\n        if (!selectedEnemy) return;\n\n        const correctAnswer = selectedEnemy.question.answer.toString();\n        const userAnswer = this.answerInput.value;\n\n        if (userAnswer === correctAnswer) selectedEnemy.delete(this);\n\n        this.answerInput.value = '';\n    }\n}\n\nexport default Game;\n","import './styles/styles.css';\nimport Game from './modules/game';\nimport Engine from './modules/engine';\n\nconst game = new Game();\nconst engine = new Engine(game.update, game.draw);\n\nengine.start();\ngame.start();\n","class Timer {\n    constructor(duration, onFinish) {\n        this.duration = duration;\n        this.onFinish = onFinish;\n        this.elapsed = 0;\n    }\n\n    tick(deltaTime) {\n        this.elapsed += deltaTime;\n\n        if (this.elapsed > this.duration) {\n            this.onFinish();\n            this.reset();\n        }\n    }\n\n    reset() {\n        this.elapsed = 0;\n    }\n}\n\nexport default Timer;\n","class Enemy {\n    constructor(xPos, yPos, game, question, speed) {\n        this.elements = {\n            enemy: document.createElement('div'),\n            question: document.createElement('div'),\n        };\n\n        this.pos = { x: xPos, y: yPos };\n        this.width = 50;\n        this.height = 50;\n        this.speed = speed; // px per second\n        this.selected = false; // default false (not selected)\n        this.question = question;\n        this.game = game;\n\n        // setting some enemy css\n        this.elements.enemy.classList.add('enemy');\n        this.elements.enemy.style.width = `${this.width}px`;\n        this.elements.enemy.style.height = `${this.height}px`;\n\n        // question element styles\n        this.elements.question.classList.add('enemy-question');\n        this.elements.question.textContent = this.question.text;\n        this.elements.enemy.appendChild(this.elements.question);\n\n        // set enemy selected\n        this.elements.enemy.addEventListener('click', () => {\n            this.unSelect();\n            this.select();\n            this.game.answerInput.focus();\n        });\n    }\n\n    select() {\n        // select clicked enemy\n        this.selected = true;\n        if (this.selected) {\n            this.elements.enemy.classList.add('selected');\n        }\n    }\n\n    unSelect() {\n        // remove all selected class and attribute in order to make only one selection\n        const enemiesArr = this.game.enemies;\n        const selectedEnemy = enemiesArr.find((enemy) => enemy.selected);\n        if (selectedEnemy === undefined) return;\n        selectedEnemy.selected = false;\n        selectedEnemy.elements.enemy.classList.remove('selected');\n    }\n\n    update(game, deltaTime) {\n        if (this.hasHitCastle(game)) {\n            this.delete(game);\n            game.castle.damage(1);\n            return;\n        }\n\n        // multiply speed by deltaTime in seconds for consistent movement across\n        // different framerates\n        this.pos.x += this.speed * (deltaTime / 1000);\n    }\n\n    draw() {\n        // draw the enemy to different position\n        this.elements.enemy.style.transform = `translate(${this.pos.x}px, ${this.pos.y}px)`;\n    }\n\n    delete(game) {\n        // remove enemy from game-board\n        this.elements.enemy.remove();\n        // remove enemy from enemies array\n        game.deleteEnemy(this);\n    }\n\n    hasHitCastle(game) {\n        return this.pos.x >= game.fieldWidth - this.width;\n    }\n}\n\nexport default Enemy;\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n"],"sourceRoot":""}