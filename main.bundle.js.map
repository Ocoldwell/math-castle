{"version":3,"sources":["webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/questionGenerator.js","webpack://castle-game/./src/modules/scoreHandler.js","webpack://castle-game/./src/modules/defaultSettings.js","webpack://castle-game/./src/modules/domUtils.js","webpack://castle-game/./src/modules/engine.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/index.js"],"names":["element","document","querySelector","height","width","lives","elements","container","getElementById","livesText","setup","this","draw","damage","amount","onGameOver","textContent","Math","max","duration","onFinish","autoRestart","timeRemaining","Object","freeze","tick","deltaTime","getHumanTimeRemaining","seconds","ceil","minutes","floor","operatorDifficulty","easy","medium","hard","insane","wholeNumberGenerator","number","random","questionNumberGenerator","difficulty","generateDifficulty","operator","length","indexOperatorGenerator","operatorSelector","number1","number2","questionText","text","answer","question","questionArr","split","num1","Number","num2","answerQuestion","scoreElements","querySelectorAll","score","forEach","addPoints","reset","SPAWN_POINTS","FIRST_LANE","x","y","SECOND_LANE","THIRD_LANE","POINTS","CORRECT_ANSWER","WRONG_ANSWER","CASTLE_LIFE_LOST","enemySpeed","enemySpeedIncrement","spawnTimerMs","gameTimerMs","questionDifficulty","castleStartingLives","hideElement","style","display","showElement","displayValue","startPage","gamePage","gameOverPage","difficultySelectPage","answerForm","answerInput","gameTimer","wrongAnswersEl","startButton","restartButton","pauseButton","difficultyButtons","homeButton","settings","timers","fieldWidth","constructor","update","render","running","rafID","undefined","accumulatedTime","currentTime","timeStep","cycle","bind","timeStamp","requestAnimationFrame","updated","start","stop","cancelAnimationFrame","gameState","keys","key","enemies","enemy","selectedEnemy","wrongAnswers","spawnEnemy","position","speed","handleSelectEnemy","damageCastle","deleteEnemy","enemyElement","createElement","questionElement","classList","add","appendChild","addEventListener","handleDelete","remove","transform","toggleSelect","toggle","getRandomSpawnPoint","push","filter","handleAnswerSubmit","event","preventDefault","value","trim","correctAnswer","toString","scoreHandler","focus","clickedEnemy","find","currentTarget","gameOver","spawnTimer","restart","handlePause","first","second","disabled","handleStartButtonClick","handleDifficultySelect","selectedDifficulty","target","dataset","handleHomeButtonClick","init","button"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 1000,\n};\n\nexport default gameBoard;\n","const castle = {\n    height: 400,\n    width: 137,\n    lives: null,\n    elements: {\n        container: document.getElementById('castle'),\n        livesText: document.getElementById('castle-lives'),\n    },\n\n    setup(lives) {\n        this.lives = lives;\n        this.draw();\n    },\n\n    damage(amount, onGameOver) {\n        this.lives -= amount;\n        this.draw();\n\n        if (this.lives === 0) onGameOver();\n    },\n\n    draw() {\n        this.elements.livesText.textContent = Math.max(0, this.lives);\n    },\n};\n\nexport default castle;\n","function Timer(duration, onFinish, { autoRestart = true } = {}) {\n    let timeRemaining = duration;\n\n    function restart() {\n        timeRemaining = duration;\n    }\n\n    function handleComplete() {\n        onFinish();\n        if (autoRestart) restart();\n    }\n\n    function tick(deltaTime) {\n        timeRemaining = Math.max(0, timeRemaining - deltaTime);\n\n        if (timeRemaining <= 1) handleComplete();\n    }\n\n    // converts time in ms to mm:ss format\n    function getHumanTimeRemaining() {\n        const seconds = Math.ceil(timeRemaining / 1000) % 60;\n        const minutes = Math.floor(Math.ceil(timeRemaining / 1000) / 60);\n\n        const formatedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n\n        return `${formattedMinutes}:${formatedSeconds}`;\n    }\n\n    return Object.freeze({\n        tick,\n        getHumanTimeRemaining,\n    });\n}\n\nexport default Timer;\n","// \\u00D7 is the unicode symbol for multiplication and \\u00F7 for division in Javascript.\n\nconst operatorDifficulty = {\n    easy: ['+', '-'],\n    medium: ['+', '-', '\\u00D7'],\n    hard: ['+', '-', '\\u00D7'],\n    insane: ['+', '-', '\\u00D7', '\\u00F7'],\n};\n\nconst wholeNumberGenerator = (number) => Math.floor(Math.random() * number);\n\n// Change difficulty here as this is the factor of multiplication that determines range of numbers.\nconst generateDifficulty = (difficulty) => {\n    switch (difficulty) {\n        case 'easy':\n            return 5;\n        case 'medium':\n            return 10;\n        case 'hard':\n            return 30;\n        case 'insane':\n            return 100;\n        default:\n            return 5;\n    }\n};\n\nconst indexOperatorGenerator = (difficulty) =>\n    wholeNumberGenerator(operatorDifficulty[difficulty].length);\n\nconst operatorSelector = (difficulty) =>\n    operatorDifficulty[difficulty][indexOperatorGenerator(difficulty)];\n\nconst questionNumberGenerator = (difficulty) =>\n    wholeNumberGenerator(generateDifficulty(difficulty)) + 1;\n\nconst answerQuestion = (question) => {\n    const questionArr = question.split(' ');\n    const num1 = Number(questionArr[0]);\n    const operator = questionArr[1];\n    const num2 = Number(questionArr[2]);\n    let answer;\n    if (operator === '+') {\n        answer = num1 + num2;\n    } else if (operator === '-') {\n        answer = num1 - num2;\n    } else if (operator === '\\u00D7') {\n        answer = num1 * num2;\n    } else {\n        answer = num1 / num2;\n    }\n    return answer;\n};\n\nconst questionGenerator = (difficulty) => {\n    const operator = operatorSelector(difficulty);\n    let number1 = questionNumberGenerator(difficulty);\n    let number2 = questionNumberGenerator(difficulty);\n    // Functions that will determine question difficulty\n    while (operator === '\\u00F7') {\n        if (number1 % number2 !== 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n    while (operator === '-') {\n        if (number1 - number2 < 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '\\u00D7') {\n        if (number1 * number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '+') {\n        if (number1 + number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    const questionText = `${number1} ${operator} ${number2}`;\n    const answer = answerQuestion(questionText);\n\n    return {\n        text: questionText,\n        answer,\n    };\n};\n\nexport default questionGenerator;\n","const scoreElements = document.querySelectorAll('[data-score-display]');\n\nlet score = 0;\n\nfunction draw() {\n    scoreElements.forEach((element) => {\n        const el = element;\n        el.textContent = score;\n    });\n}\n\nfunction addPoints(amount) {\n    if (amount < 0) {\n        score = Math.max(0, score + amount);\n    } else {\n        score += amount;\n    }\n    draw();\n}\n\nfunction reset() {\n    score = 0;\n    draw();\n}\n\nexport default Object.freeze({ addPoints, reset });\n","const DEFAULT_SETTINGS = {\n    SPAWN_POINTS: {\n        FIRST_LANE: { x: 0, y: 50 },\n        SECOND_LANE: { x: 0, y: 165 },\n        THIRD_LANE: { x: 0, y: 280 },\n    },\n    POINTS: {\n        CORRECT_ANSWER: 10,\n        WRONG_ANSWER: -2,\n        CASTLE_LIFE_LOST: -10,\n    },\n    enemySpeed: 30,\n    enemySpeedIncrement: 3,\n    spawnTimerMs: 2700,\n    gameTimerMs: 300000,\n    questionDifficulty: 'medium',\n    castleStartingLives: 3,\n};\n\nexport default DEFAULT_SETTINGS;\n","function hideElement(element) {\n    const el = element;\n    el.style.display = 'none';\n}\n\nfunction showElement(element, displayValue) {\n    const el = element;\n    el.style.display = displayValue;\n}\n\nexport { hideElement, showElement };\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\nimport questionGenerator from './questionGenerator';\nimport scoreHandler from './scoreHandler';\nimport DEFAULT_SETTINGS from './defaultSettings';\nimport { hideElement, showElement } from './domUtils';\nimport Engine from './engine';\n\nconst GAMESTATES = {\n    MENU: 0,\n    RUNNING: 1,\n    GAMEOVER: 2,\n    PAUSED: 3,\n};\n\nconst startPage = document.querySelector('#start-page');\nconst gamePage = document.querySelector('#game-page');\nconst gameOverPage = document.querySelector('#game-over-page');\nconst difficultySelectPage = document.querySelector('#difficulty-select-page');\nconst answerForm = document.querySelector('.answer-form');\nconst answerInput = document.querySelector('#answer-input');\nconst gameTimer = document.querySelector('#game-timer');\nconst wrongAnswersEl = document.querySelector('#game-over-wrong-answers');\nconst startButton = document.querySelector('.start-button');\nconst restartButton = document.querySelector('#restart-button');\nconst pauseButton = document.querySelector('.pause-button');\nconst difficultyButtons = document.querySelectorAll('[data-difficulty');\nconst homeButton = document.querySelector('#home-button');\n\nconst settings = { ...DEFAULT_SETTINGS };\nconst timers = {};\nconst fieldWidth = gameBoard.width - (castle.width - 70);\nconst engine = new Engine(update, draw);\n\nlet gameState = GAMESTATES.MENU;\nlet selectedEnemy = null;\nlet wrongAnswers = 0;\nlet enemies = [];\n\n// PRIVATE FUNCTIONS\n\nfunction spawnEnemy() {\n    const enemy = Enemy({\n        position: getRandomSpawnPoint(),\n        speed: settings.enemySpeed,\n        question: questionGenerator(settings.questionDifficulty),\n        fieldWidth,\n        handleSelectEnemy,\n        damageCastle,\n        deleteEnemy,\n    });\n    settings.enemySpeed += settings.enemySpeedIncrement;\n    gameBoard.element.appendChild(enemy.element);\n    enemies.push(enemy);\n}\n\nfunction getRandomSpawnPoint() {\n    // randomly choose an object keys in the POSITION object\n    const keys = Object.keys(settings.SPAWN_POINTS);\n    return settings.SPAWN_POINTS[keys[Math.floor(Math.random() * keys.length)]];\n}\n\nfunction deleteEnemy(element) {\n    enemies = enemies.filter((enemy) => {\n        if (enemy.element !== element) return true;\n\n        if (selectedEnemy === enemy) {\n            selectedEnemy = null;\n        }\n\n        return false;\n    });\n}\n\nfunction initialiseTimers() {\n    // spawn enemy every 2.5 seconds\n    timers.spawnTimer = Timer(settings.spawnTimerMs, spawnEnemy);\n\n    // end game after 300000 ms (5 minutes)\n    timers.gameTimer = Timer(settings.gameTimerMs, gameOver, {\n        autoRestart: false,\n    });\n}\n\nfunction handleAnswerSubmit(event) {\n    event.preventDefault();\n\n    if (!selectedEnemy || answerInput.value.trim() === '') return;\n\n    const correctAnswer = selectedEnemy.question.answer.toString();\n    const userAnswer = answerInput.value;\n\n    if (userAnswer === correctAnswer) {\n        selectedEnemy.handleDelete();\n        selectedEnemy = null;\n        scoreHandler.addPoints(settings.POINTS.CORRECT_ANSWER);\n    } else {\n        scoreHandler.addPoints(settings.POINTS.WRONG_ANSWER);\n        wrongAnswers += 1;\n    }\n\n    answerInput.value = '';\n}\n\nfunction handleSelectEnemy(event) {\n    answerInput.focus();\n\n    const clickedEnemy = enemies.find(\n        (enemy) => enemy.element === event.currentTarget\n    );\n\n    if (clickedEnemy === selectedEnemy) return;\n\n    if (selectedEnemy) selectedEnemy.toggleSelect();\n\n    clickedEnemy.toggleSelect();\n\n    selectedEnemy = clickedEnemy;\n}\n\nfunction damageCastle(amount) {\n    scoreHandler.addPoints(settings.POINTS.CASTLE_LIFE_LOST);\n    castle.damage(amount, gameOver);\n}\n\nfunction gameOver() {\n    gameState = GAMESTATES.GAMEOVER;\n    wrongAnswersEl.textContent = wrongAnswers;\n    hideElement(gamePage);\n    showElement(gameOverPage, 'flex');\n}\n\nfunction reset() {\n    settings.enemySpeed = DEFAULT_SETTINGS.enemySpeed;\n    initialiseTimers();\n    scoreHandler.reset();\n    wrongAnswers = 0;\n    answerInput.value = '';\n    castle.setup(settings.castleStartingLives);\n    enemies.forEach((enemy) => enemy.handleDelete());\n}\n\nfunction start(selectedDifficulty) {\n    reset();\n    settings.questionDifficulty = selectedDifficulty;\n    gameState = GAMESTATES.RUNNING;\n    engine.start();\n}\n\nfunction restart() {\n    reset();\n    hideElement(gameOverPage);\n    showElement(gamePage, 'flex');\n    gameState = GAMESTATES.RUNNING;\n}\n\nfunction pause() {\n    gameState = GAMESTATES.PAUSED;\n    answerInput.disabled = true;\n    enemies.forEach((enemy) => enemy.element.classList.add('not-clickable'));\n}\n\nfunction unPause() {\n    gameState = GAMESTATES.RUNNING;\n    answerInput.disabled = false;\n    enemies.forEach((enemy) => enemy.element.classList.remove('not-clickable'));\n}\n\nfunction update(deltaTime) {\n    if (gameState !== GAMESTATES.RUNNING) return;\n\n    Object.keys(timers).forEach((key) => timers[key].tick(deltaTime));\n\n    enemies.forEach((enemy) => enemy.update(deltaTime));\n}\n\nfunction draw() {\n    gameTimer.textContent = timers.gameTimer.getHumanTimeRemaining();\n\n    enemies.forEach((enemy) => enemy.draw());\n}\n\nfunction handlePause() {\n    const pauseButtonText = ['Continue', 'Pause'];\n    const [first, second] = pauseButtonText;\n    if (gameState === GAMESTATES.RUNNING) {\n        pause();\n        engine.stop();\n        pauseButton.textContent = first;\n    } else if (gameState === GAMESTATES.PAUSED) {\n        engine.start();\n        unPause();\n        pauseButton.textContent = second;\n    }\n}\n\nfunction handleStartButtonClick() {\n    hideElement(startPage);\n    showElement(difficultySelectPage, 'flex');\n}\n\nfunction handleDifficultySelect(event) {\n    const selectedDifficulty = event.target.dataset.difficulty;\n    hideElement(difficultySelectPage);\n    showElement(gamePage, 'flex');\n    start(selectedDifficulty);\n}\n\nfunction handleHomeButtonClick() {\n    if (gameState === GAMESTATES.PAUSED) handlePause();\n    engine.stop();\n    gameState = GAMESTATES.MENU;\n    hideElement(gamePage);\n    showElement(difficultySelectPage, 'flex');\n}\n\n// PUBLIC FUNCTIONS\n\nfunction init() {\n    startButton.addEventListener('click', handleStartButtonClick);\n    restartButton.addEventListener('click', restart);\n    pauseButton.addEventListener('click', handlePause);\n    answerForm.addEventListener('submit', handleAnswerSubmit);\n    difficultyButtons.forEach((button) =>\n        button.addEventListener('click', handleDifficultySelect)\n    );\n    homeButton.addEventListener('click', handleHomeButtonClick);\n}\n\nexport default Object.freeze({\n    init,\n});\n","function Enemy({\n    position: { x, y },\n    speed,\n    question,\n    fieldWidth,\n    handleSelectEnemy,\n    damageCastle,\n    deleteEnemy,\n} = {}) {\n    const width = 50;\n    const height = 50;\n    const position = { x, y };\n    const element = createElement();\n\n    // PRIVATE FUNCTIONS\n\n    function createElement() {\n        const enemyElement = document.createElement('div');\n        const questionElement = document.createElement('div');\n\n        // set enemy element styles\n        enemyElement.classList.add('enemy');\n        enemyElement.style.width = `${width}px`;\n        enemyElement.style.height = `${height}px`;\n\n        // set question element styles and text\n        questionElement.classList.add('enemy-question');\n        questionElement.textContent = question.text;\n\n        enemyElement.appendChild(questionElement);\n\n        enemyElement.addEventListener('click', handleSelectEnemy);\n\n        return enemyElement;\n    }\n\n    function hasHitCastle() {\n        return position.x >= fieldWidth - width;\n    }\n\n    // PUBLIC FUNCTIONS\n\n    function update(deltaTime) {\n        if (hasHitCastle()) {\n            handleDelete();\n            damageCastle(1);\n            return;\n        }\n        // multiply speed by deltaTime in seconds\n        // for consistent movement across different framerates\n        position.x += speed * (deltaTime / 1000);\n    }\n\n    function draw() {\n        // draw the enemy to different position\n        element.style.transform = `translate(${position.x}px, ${position.y}px)`;\n    }\n\n    function handleDelete() {\n        deleteEnemy(element);\n        element.remove();\n    }\n\n    function toggleSelect() {\n        element.classList.toggle('selected');\n    }\n\n    return Object.freeze({\n        update,\n        draw,\n        handleDelete,\n        toggleSelect,\n        question,\n        get element() {\n            return element;\n        },\n    });\n}\n\nexport default Enemy;\n","import './styles/styles.css';\nimport game from './modules/game';\n\ngame.init();\n"],"sourceRoot":""}