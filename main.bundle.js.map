{"version":3,"sources":["webpack://castle-game/./src/gameBoard.js","webpack://castle-game/./src/castle.js","webpack://castle-game/./src/enemy.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/game.js"],"names":["element","document","querySelector","height","width","getElementById","health","constructor","xPos","yPos","this","createElement","pos","x","y","speed","selected","question","answer","classList","add","style","update","game","hasHitCastle","delete","draw","transform","remove","deleteEnemy","fieldWidth","gameBoard","castle","enemies","gameLoop","bind","start","spawnEnemy","requestAnimationFrame","forEach","enemy","gameBoardElement","i","push","appendChild","enemyToDelete","filter"],"mappings":"mBAAA,MAMA,EANkB,CACdA,QAASC,SAASC,cAAc,eAChCC,OAAQ,IACRC,MAAO,KCIX,EAPe,CACXJ,QAASC,SAASI,eAAe,UACjCF,OAAQ,IACRC,MAAO,IACPE,OAAQ,MCwCZ,EA3CA,MACIC,YAAYC,EAAMC,GACdC,KAAKV,QAAUC,SAASU,cAAc,OACtCD,KAAKE,IAAM,CAAEC,EAAGL,EAAMM,EAAGL,GACzBC,KAAKN,MAAQ,GACbM,KAAKP,OAAS,GACdO,KAAKK,MAAQ,EACbL,KAAKM,UAAW,EAChBN,KAAKO,SAAW,GAChBP,KAAKQ,OAAS,GAGdR,KAAKV,QAAQmB,UAAUC,IAAI,SAC3BV,KAAKV,QAAQqB,MAAMjB,MAAQ,GAAGM,KAAKN,UACnCM,KAAKV,QAAQqB,MAAMlB,OAAS,GAAGO,KAAKP,WAGxCmB,OAAOC,GACCb,KAAKc,aAAaD,GAClBb,KAAKe,OAAOF,GAIhBb,KAAKE,IAAIC,GAAKH,KAAKK,MAGvBW,OAEIhB,KAAKV,QAAQqB,MAAMM,UAAY,aAAajB,KAAKE,IAAIC,QAAQH,KAAKE,IAAIE,OAG1EW,OAAOF,GAEHb,KAAKV,QAAQ4B,SAEbL,EAAKM,YAAYnB,MAGrBc,aAAaD,GACT,OAAOb,KAAKE,IAAIC,GAAKU,EAAKO,WAAapB,KAAKN,SCrCvC,ICCb,MACIG,cACIG,KAAKqB,UAAY,EACjBrB,KAAKsB,OAAS,EAEdtB,KAAKoB,WAAa,QAAkB,QACpCpB,KAAKuB,QAAU,GAGfvB,KAAKwB,SAAWxB,KAAKwB,SAASC,KAAKzB,MAGvC0B,QACI1B,KAAK2B,aAGLC,sBAAsB5B,KAAKwB,UAG/BA,WACIxB,KAAKY,SACLZ,KAAKgB,OAGLY,sBAAsB5B,KAAKwB,UAG/BZ,SACIZ,KAAKuB,QAAQM,SAASC,GAAUA,EAAMlB,OAAOZ,QAGjDgB,OACIhB,KAAKuB,QAAQM,SAASC,GAAUA,EAAMd,SAG1CW,aACI,MACM5B,EAAO,CAAC,KAAM,IAAK,OACnBgC,EAAmB/B,KAAKqB,UAAU/B,QAExC,IAAK,IAAI0C,EAAI,EAAGA,EAJK,EAIaA,GAAK,EAAG,CACtC,MAAMF,EAAQ,IAAI,EAAM,EAAG/B,EAAKiC,IAChChC,KAAKuB,QAAQU,KAAKH,GAGtB9B,KAAKuB,QAAQM,SAASC,IAClBC,EAAiBG,YAAYJ,EAAMxC,SACnCwC,EAAMd,UAIdG,YAAYgB,GACRnC,KAAKuB,QAAUvB,KAAKuB,QAAQa,QAAQN,GAAUA,IAAUK,ODnD3DT,S","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    element: document.getElementById('castle'),\n    height: 400,\n    width: 200,\n    health: null,\n};\n\nexport default castle;\n","// enemy class\nclass Enemy {\n    constructor(xPos, yPos) {\n        this.element = document.createElement('div');\n        this.pos = { x: xPos, y: yPos };\n        this.width = 50;\n        this.height = 50;\n        this.speed = 1;\n        this.selected = false; // default false (not selected)\n        this.question = '';\n        this.answer = '';\n\n        // setting some enemy css\n        this.element.classList.add('enemy');\n        this.element.style.width = `${this.width}px`;\n        this.element.style.height = `${this.height}px`;\n    }\n\n    update(game) {\n        if (this.hasHitCastle(game)) {\n            this.delete(game);\n            return;\n        }\n\n        this.pos.x += this.speed;\n    }\n\n    draw() {\n        // draw the enemy to different position\n        this.element.style.transform = `translate(${this.pos.x}px, ${this.pos.y}px)`;\n    }\n\n    delete(game) {\n        // remove enemy from game-board\n        this.element.remove();\n        // remove enemy from enemies array\n        game.deleteEnemy(this);\n    }\n\n    hasHitCastle(game) {\n        return this.pos.x >= game.fieldWidth - this.width;\n    }\n}\n\nexport default Enemy;\n","import './styles/styles.css';\nimport Game from './game';\n\nconst game = new Game();\n\ngame.start();\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n\n        // bind gameLoop 'this' to Game class\n        this.gameLoop = this.gameLoop.bind(this);\n    }\n\n    start() {\n        this.spawnEnemy();\n\n        // start the game loop\n        requestAnimationFrame(this.gameLoop);\n    }\n\n    gameLoop() {\n        this.update();\n        this.draw();\n\n        // call gameLoop before every browser repaint\n        requestAnimationFrame(this.gameLoop);\n    }\n\n    update() {\n        this.enemies.forEach((enemy) => enemy.update(this));\n    }\n\n    draw() {\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemiesCount = 3;\n        const yPos = [62.5, 175, 287.5];\n        const gameBoardElement = this.gameBoard.element;\n\n        for (let i = 0; i < enemiesCount; i += 1) {\n            const enemy = new Enemy(0, yPos[i]);\n            this.enemies.push(enemy);\n        }\n\n        this.enemies.forEach((enemy) => {\n            gameBoardElement.appendChild(enemy.element);\n            enemy.draw();\n        });\n    }\n\n    deleteEnemy(enemyToDelete) {\n        this.enemies = this.enemies.filter((enemy) => enemy !== enemyToDelete);\n    }\n}\n\nexport default Game;\n"],"sourceRoot":""}