{"version":3,"sources":["webpack://castle-game/./src/gameBoard.js","webpack://castle-game/./src/castle.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/game.js","webpack://castle-game/./src/timer.js","webpack://castle-game/./src/enemy.js","webpack://castle-game/./src/engine.js"],"names":["element","document","querySelector","height","width","getElementById","health","constructor","this","gameBoard","castle","fieldWidth","enemies","update","bind","draw","spawnEnemy","spawnTimer","duration","onFinish","startTime","undefined","elapsed","pauseStart","pauseTime","paused","start","performance","now","tick","reduction","reset","finished","pause","addEventListener","visibilityState","deltaTime","forEach","enemy","xPos","yPos","createElement","pos","x","y","speed","selected","question","answer","classList","add","style","game","hasHitCastle","delete","transform","remove","deleteEnemy","appendChild","push","enemyToDelete","filter","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","timeStamp","requestAnimationFrame","updated","stop","cancelAnimationFrame"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    element: document.getElementById('castle'),\n    height: 400,\n    width: 200,\n    health: null,\n};\n\nexport default castle;\n","import './styles/styles.css';\nimport Game from './game';\nimport Engine from './engine';\n\nconst game = new Game();\n\nconst engine = new Engine(game.update, game.draw);\n\ngame.start();\n\nengine.start();\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n\n        // bind methods 'this' to Game class\n        this.update = this.update.bind(this);\n        this.draw = this.draw.bind(this);\n        this.spawnEnemy = this.spawnEnemy.bind(this);\n\n        this.spawnTimer = new Timer(2000, this.spawnEnemy);\n\n        document.addEventListener('visibilitychange', () => {\n            if (document.visibilityState === 'hidden') {\n                this.spawnTimer.pause();\n            }\n        });\n    }\n\n    start() {\n        this.spawnTimer.start();\n    }\n\n    update(deltaTime) {\n        this.spawnTimer.tick();\n        this.enemies.forEach((enemy) => enemy.update(this, deltaTime));\n    }\n\n    draw() {\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemy = new Enemy(0, 150);\n        this.gameBoard.element.appendChild(enemy.element);\n        this.enemies.push(enemy);\n    }\n\n    deleteEnemy(enemyToDelete) {\n        this.enemies = this.enemies.filter((enemy) => enemy !== enemyToDelete);\n    }\n}\n\nexport default Game;\n","class Timer {\n    constructor(duration, onFinish) {\n        this.duration = duration;\n        this.onFinish = onFinish;\n\n        this.startTime = undefined;\n        this.elapsed = 0;\n        this.pauseStart = undefined;\n        this.pauseTime = undefined;\n        this.paused = false;\n    }\n\n    start() {\n        this.startTime = performance.now();\n    }\n\n    tick() {\n        if (this.paused) {\n            this.pauseTime = performance.now() - this.pauseStart;\n            this.paused = false;\n        }\n\n        const reduction = this.pauseTime === undefined ? 0 : this.pauseTime;\n\n        this.elapsed = performance.now() - this.startTime - reduction;\n\n        if (this.elapsed > this.duration) {\n            this.onFinish();\n            this.reset();\n        }\n    }\n\n    reset() {\n        this.startTime = performance.now();\n        this.elapsed = 0;\n        this.finished = false;\n        this.paused = false;\n        this.pauseTime = undefined;\n        this.pauseStart = undefined;\n    }\n\n    pause() {\n        this.pauseStart = performance.now();\n        this.paused = true;\n    }\n}\n\nexport default Timer;\n","// enemy class\nclass Enemy {\n    constructor(xPos, yPos) {\n        this.element = document.createElement('div');\n        this.pos = { x: xPos, y: yPos };\n        this.width = 50;\n        this.height = 50;\n        this.speed = 60; // px per second\n        this.selected = false; // default false (not selected)\n        this.question = '';\n        this.answer = '';\n\n        // setting some enemy css\n        this.element.classList.add('enemy');\n        this.element.style.width = `${this.width}px`;\n        this.element.style.height = `${this.height}px`;\n    }\n\n    update(game, deltaTime) {\n        if (this.hasHitCastle(game)) {\n            this.delete(game);\n            return;\n        }\n\n        // multiply speed by deltaTime in seconds for consistent movement across\n        // different framerates\n        this.pos.x += this.speed * (deltaTime / 1000);\n    }\n\n    draw() {\n        // draw the enemy to different position\n        this.element.style.transform = `translate(${this.pos.x}px, ${this.pos.y}px)`;\n    }\n\n    delete(game) {\n        // remove enemy from game-board\n        this.element.remove();\n        // remove enemy from enemies array\n        game.deleteEnemy(this);\n    }\n\n    hasHitCastle(game) {\n        return this.pos.x >= game.fieldWidth - this.width;\n    }\n}\n\nexport default Enemy;\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n"],"sourceRoot":""}