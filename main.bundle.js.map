{"version":3,"sources":["webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/questionGenerator.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/engine.js"],"names":["element","document","querySelector","height","width","lives","elements","container","getElementById","livesText","game","undefined","setup","this","draw","damage","amount","gameOver","textContent","Math","max","duration","onFinish","autoRestart","timeRemaining","Object","freeze","tick","deltaTime","getHumanTimeRemaining","seconds","ceil","minutes","floor","operatorDifficulty","easy","medium","hard","insane","wholeNumberGenerator","number","random","questionNumberGenerator","difficulty","generateDifficulty","operator","length","indexOperatorGenerator","operatorSelector","number1","number2","questionText","text","answer","question","questionArr","split","num1","Number","num2","answerQuestion","POSITION","firstLane","secondLane","thirdLane","enemySpeed","startPage","gamePage","gameOverPage","constructor","gameBoard","castle","answerForm","answerInput","gameTimer","fieldWidth","enemies","timers","gameState","update","bind","spawnEnemy","handleAnswerSubmit","start","addEventListener","initialiseTimers","style","display","pause","forEach","enemy","classList","add","continue","remove","keys","key","countDownTimer","xPos","yPos","speed","createElement","pos","x","y","selected","appendChild","unSelect","select","focus","selectedEnemy","find","hasHitCastle","delete","transform","deleteEnemy","randomLane","push","enemyToDelete","filter","value","spawnTimer","event","preventDefault","correctAnswer","toString","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","timeStamp","requestAnimationFrame","updated","stop","cancelAnimationFrame","startButton","restartButton","pauseButton","startGame","first","second"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    height: 400,\n    width: 200,\n    lives: null,\n    elements: {\n        container: document.getElementById('castle'),\n        livesText: document.getElementById('castle-lives'),\n    },\n    game: undefined,\n\n    setup(game, lives) {\n        this.game = game;\n        this.lives = lives;\n        this.draw();\n    },\n\n    damage(amount) {\n        this.lives -= amount;\n        this.draw();\n\n        if (this.lives === 0) this.game.gameOver();\n    },\n\n    draw() {\n        this.elements.livesText.textContent = Math.max(0, this.lives);\n    },\n};\n\nexport default castle;\n","function Timer(duration, onFinish, { autoRestart = true } = {}) {\n    let timeRemaining = duration;\n\n    function restart() {\n        timeRemaining = duration;\n    }\n\n    function handleComplete() {\n        onFinish();\n        if (autoRestart) restart();\n    }\n\n    function tick(deltaTime) {\n        timeRemaining = Math.max(0, timeRemaining - deltaTime);\n\n        if (timeRemaining <= 1) handleComplete();\n    }\n\n    // converts time in ms to mm:ss format\n    function getHumanTimeRemaining() {\n        const seconds = Math.ceil(timeRemaining / 1000) % 60;\n        const minutes = Math.floor(Math.ceil(timeRemaining / 1000) / 60);\n\n        const formatedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n\n        return `${formattedMinutes}:${formatedSeconds}`;\n    }\n\n    return Object.freeze({\n        tick,\n        getHumanTimeRemaining,\n    });\n}\n\nexport default Timer;\n","// \\u00D7 is the unicode symbol for multiplication and \\u00F7 for division in Javascript.\n\nconst operatorDifficulty = {\n    easy: ['+', '-'],\n    medium: ['+', '-', '\\u00D7'],\n    hard: ['+', '-', '\\u00D7'],\n    insane: ['+', '-', '\\u00D7', '\\u00F7'],\n};\n\nconst wholeNumberGenerator = (number) => Math.floor(Math.random() * number);\n\n// Change difficulty here as this is the factor of multiplication that determines range of numbers.\nconst generateDifficulty = (difficulty) => {\n    switch (difficulty) {\n        case 'easy':\n            return 5;\n        case 'medium':\n            return 10;\n        case 'hard':\n            return 30;\n        case 'insane':\n            return 100;\n        default:\n            return 5;\n    }\n};\n\nconst indexOperatorGenerator = (difficulty) =>\n    wholeNumberGenerator(operatorDifficulty[difficulty].length);\n\nconst operatorSelector = (difficulty) =>\n    operatorDifficulty[difficulty][indexOperatorGenerator(difficulty)];\n\nconst questionNumberGenerator = (difficulty) =>\n    wholeNumberGenerator(generateDifficulty(difficulty)) + 1;\n\nconst answerQuestion = (question) => {\n    const questionArr = question.split(' ');\n    const num1 = Number(questionArr[0]);\n    const operator = questionArr[1];\n    const num2 = Number(questionArr[2]);\n    let answer;\n    if (operator === '+') {\n        answer = num1 + num2;\n    } else if (operator === '-') {\n        answer = num1 - num2;\n    } else if (operator === '\\u00D7') {\n        answer = num1 * num2;\n    } else {\n        answer = num1 / num2;\n    }\n    return answer;\n};\n\nconst questionGenerator = (difficulty) => {\n    const operator = operatorSelector(difficulty);\n    let number1 = questionNumberGenerator(difficulty);\n    let number2 = questionNumberGenerator(difficulty);\n    // Functions that will determine question difficulty\n    while (operator === '\\u00F7') {\n        if (number1 % number2 !== 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n    while (operator === '-') {\n        if (number1 - number2 < 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '\\u00D7') {\n        if (number1 * number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '+') {\n        if (number1 + number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    const questionText = `${number1} ${operator} ${number2}`;\n    const answer = answerQuestion(questionText);\n\n    return {\n        text: questionText,\n        answer,\n    };\n};\n\nexport default questionGenerator;\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\nimport questionGenerator from './questionGenerator';\n\nexport const GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    GAMEOVER: 2,\n    PAUSED: 3,\n};\n\nconst POSITION = {\n    firstLane: 50,\n    secondLane: 165,\n    thirdLane: 280,\n};\n\nlet enemySpeed = 40;\nconst startPage = document.getElementById('start-page');\nconst gamePage = document.getElementById('game-page');\nconst gameOverPage = document.getElementById('game-over-page');\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        this.answerForm = document.querySelector('.answer-form');\n        this.answerInput = document.querySelector('#answer-input');\n        this.gameTimer = document.querySelector('#game-timer');\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n        this.timers = {};\n        this.gameState = GAMESTATE.MENU;\n\n        // bind methods 'this' to Game class\n        this.update = this.update.bind(this);\n        this.draw = this.draw.bind(this);\n        this.spawnEnemy = this.spawnEnemy.bind(this);\n        this.handleAnswerSubmit = this.handleAnswerSubmit.bind(this);\n        this.gameOver = this.gameOver.bind(this);\n    }\n\n    start() {\n        this.castle.setup(this, 3);\n        this.answerForm.addEventListener('submit', this.handleAnswerSubmit);\n        this.gameState = GAMESTATE.RUNNING;\n        this.initialiseTimers();\n        // hide start page\n        startPage.style.display = 'none';\n        gameOverPage.style.display = 'none';\n        gamePage.style.display = 'flex';\n    }\n\n    pause() {\n        this.gameState = GAMESTATE.PAUSED;\n        this.enemies.forEach((enemy) =>\n            enemy.elements.enemy.classList.add('not-clickable')\n        );\n    }\n\n    continue() {\n        this.gameState = GAMESTATE.RUNNING;\n        this.enemies.forEach((enemy) =>\n            enemy.elements.enemy.classList.remove('not-clickable')\n        );\n    }\n\n    update(deltaTime) {\n        if (this.gameState !== GAMESTATE.RUNNING) return;\n\n        Object.keys(this.timers).forEach((key) =>\n            this.timers[key].tick(deltaTime)\n        );\n\n        this.enemies.forEach((enemy) => enemy.update(this, deltaTime));\n    }\n\n    draw() {\n        this.gameTimer.textContent =\n            this.timers.countDownTimer.getHumanTimeRemaining();\n\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemy = new Enemy(\n            0,\n            this.randomLane(),\n            this,\n            questionGenerator('insane'),\n            enemySpeed\n        );\n        enemySpeed += 3;\n        this.gameBoard.element.appendChild(enemy.elements.enemy);\n        this.enemies.push(enemy);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    randomLane() {\n        // randomly choose an object keys in the POSITION object\n        const keys = Object.keys(POSITION);\n        return POSITION[keys[Math.floor(Math.random() * keys.length)]];\n    }\n\n    deleteEnemy(enemyToDelete) {\n        this.enemies = this.enemies.filter((enemy) => enemy !== enemyToDelete);\n    }\n\n    gameOver() {\n        this.gameState = GAMESTATE.GAMEOVER;\n        gamePage.style.display = 'none';\n        gameOverPage.style.display = 'flex';\n        this.enemies.forEach((enemy) => {\n            enemy.delete();\n        });\n        this.answerInput.value = '';\n        enemySpeed = 40;\n    }\n\n    initialiseTimers() {\n        // spawn enemy every 2.5 seconds\n        this.timers.spawnTimer = Timer(2500, this.spawnEnemy);\n\n        // end game after 300000 ms (5 minutes)\n        this.timers.countDownTimer = Timer(300000, this.gameOver, {\n            autoRestart: false,\n        });\n    }\n\n    handleAnswerSubmit(event) {\n        event.preventDefault();\n\n        const selectedEnemy = this.enemies.find((enemy) => enemy.selected);\n        if (!selectedEnemy) return;\n\n        const correctAnswer = selectedEnemy.question.answer.toString();\n        const userAnswer = this.answerInput.value;\n\n        if (userAnswer === correctAnswer) selectedEnemy.delete(this);\n\n        this.answerInput.value = '';\n    }\n}\n\nexport default Game;\n","import './styles/styles.css';\nimport Game, { GAMESTATE } from './modules/game';\nimport Engine from './modules/engine';\n\nconst game = new Game();\nconst engine = new Engine(game.update, game.draw);\n\nconst startButton = document.querySelector('.start-button');\nconst restartButton = document.querySelector('.restart-button');\nconst pauseButton = document.querySelector('.pause-button');\n\nfunction startGame() {\n    engine.start();\n    game.start();\n}\n\nfunction pauseGame() {\n    const pauseButtonText = ['Continue', 'Pause'];\n    const [first, second] = pauseButtonText;\n    if (game.gameState === GAMESTATE.RUNNING) {\n        game.pause();\n        engine.stop();\n        pauseButton.textContent = first;\n    } else if (game.gameState === GAMESTATE.PAUSED) {\n        engine.start();\n        game.continue();\n        pauseButton.textContent = second;\n    }\n}\n\nstartButton.addEventListener('click', startGame);\nrestartButton.addEventListener('click', startGame);\npauseButton.addEventListener('click', pauseGame);\n","class Enemy {\n    constructor(xPos, yPos, game, question, speed) {\n        this.elements = {\n            enemy: document.createElement('div'),\n            question: document.createElement('div'),\n        };\n\n        this.pos = { x: xPos, y: yPos };\n        this.width = 50;\n        this.height = 50;\n        this.speed = speed; // px per second\n        this.selected = false; // default false (not selected)\n        this.question = question;\n        this.game = game;\n\n        // setting some enemy css\n        this.elements.enemy.classList.add('enemy');\n        this.elements.enemy.style.width = `${this.width}px`;\n        this.elements.enemy.style.height = `${this.height}px`;\n\n        // question element styles\n        this.elements.question.classList.add('enemy-question');\n        this.elements.question.textContent = this.question.text;\n        this.elements.enemy.appendChild(this.elements.question);\n\n        // set enemy selected\n        this.elements.enemy.addEventListener('click', () => {\n            this.unSelect();\n            this.select();\n            this.game.answerInput.focus();\n        });\n    }\n\n    select() {\n        // select clicked enemy\n        this.selected = true;\n        if (this.selected) {\n            this.elements.enemy.classList.add('selected');\n        }\n    }\n\n    unSelect() {\n        // remove all selected class and attribute in order to make only one selection\n        const enemiesArr = this.game.enemies;\n        const selectedEnemy = enemiesArr.find((enemy) => enemy.selected);\n        if (selectedEnemy === undefined) return;\n        selectedEnemy.selected = false;\n        selectedEnemy.elements.enemy.classList.remove('selected');\n    }\n\n    update(game, deltaTime) {\n        if (this.hasHitCastle(game)) {\n            this.delete(game);\n            game.castle.damage(1);\n            return;\n        }\n\n        // multiply speed by deltaTime in seconds for consistent movement across\n        // different framerates\n        this.pos.x += this.speed * (deltaTime / 1000);\n    }\n\n    draw() {\n        // draw the enemy to different position\n        this.elements.enemy.style.transform = `translate(${this.pos.x}px, ${this.pos.y}px)`;\n    }\n\n    delete() {\n        // remove enemy from game-board\n        this.elements.enemy.remove();\n        // remove enemy from enemies array\n        this.game.deleteEnemy(this);\n    }\n\n    hasHitCastle(game) {\n        return this.pos.x >= game.fieldWidth - this.width;\n    }\n}\n\nexport default Enemy;\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n"],"sourceRoot":""}