{"version":3,"sources":["webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/engine.js"],"names":["element","document","querySelector","height","width","lives","elements","container","getElementById","livesText","game","undefined","setup","this","draw","damage","amount","gameOver","textContent","Math","max","constructor","gameBoard","castle","fieldWidth","enemies","gameState","update","bind","spawnEnemy","spawnTimer","duration","onFinish","elapsed","tick","deltaTime","reset","start","forEach","enemy","xPos","yPos","createElement","pos","x","y","speed","selected","question","answer","classList","add","style","addEventListener","unSelect","select","selectedEnemy","find","remove","hasHitCastle","delete","transform","deleteEnemy","appendChild","push","enemyToDelete","filter","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","timeStamp","requestAnimationFrame","updated","stop","cancelAnimationFrame"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    height: 400,\n    width: 200,\n    lives: 3,\n    elements: {\n        container: document.getElementById('castle'),\n        livesText: document.getElementById('castle-lives'),\n    },\n    game: undefined,\n\n    setup(game) {\n        this.game = game;\n        this.draw();\n    },\n\n    damage(amount) {\n        this.lives -= amount;\n        this.draw();\n\n        if (this.lives === 0) this.game.gameOver();\n    },\n\n    draw() {\n        this.elements.livesText.textContent = Math.max(0, this.lives);\n    },\n};\n\nexport default castle;\n","import './styles/styles.css';\nimport Game from './modules/game';\nimport Engine from './modules/engine';\n\nconst game = new Game();\nconst engine = new Engine(game.update, game.draw);\n\nengine.start();\ngame.start();\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\n\nconst GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    GAMEOVER: 2,\n};\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n        this.gameState = GAMESTATE.MENU;\n\n        // bind methods 'this' to Game class\n        this.update = this.update.bind(this);\n        this.draw = this.draw.bind(this);\n        this.spawnEnemy = this.spawnEnemy.bind(this);\n\n        this.spawnTimer = new Timer(2000, this.spawnEnemy);\n    }\n\n    start() {\n        this.castle.setup(this);\n\n        this.gameState = GAMESTATE.RUNNING;\n    }\n\n    update(deltaTime) {\n        if (this.gameState !== GAMESTATE.RUNNING) return;\n\n        this.spawnTimer.tick(deltaTime);\n        this.enemies.forEach((enemy) => enemy.update(this, deltaTime));\n    }\n\n    draw() {\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemy = new Enemy(0, 150, this);\n        this.gameBoard.element.appendChild(enemy.element);\n        this.enemies.push(enemy);\n    }\n\n    deleteEnemy(enemyToDelete) {\n        this.enemies = this.enemies.filter((enemy) => enemy !== enemyToDelete);\n    }\n\n    gameOver() {\n        this.gameState = GAMESTATE.GAMEOVER;\n    }\n}\n\nexport default Game;\n","class Timer {\n    constructor(duration, onFinish) {\n        this.duration = duration;\n        this.onFinish = onFinish;\n        this.elapsed = 0;\n    }\n\n    tick(deltaTime) {\n        this.elapsed += deltaTime;\n\n        if (this.elapsed > this.duration) {\n            this.onFinish();\n            this.reset();\n        }\n    }\n\n    reset() {\n        this.elapsed = 0;\n    }\n}\n\nexport default Timer;\n","class Enemy {\n    constructor(xPos, yPos, game) {\n        this.element = document.createElement('div');\n        this.pos = { x: xPos, y: yPos };\n        this.width = 50;\n        this.height = 50;\n        this.speed = 60; // px per second\n        this.selected = false; // default false (not selected)\n        this.question = '';\n        this.answer = '';\n        this.game = game;\n\n        // setting some enemy css\n        this.element.classList.add('enemy');\n        this.element.style.width = `${this.width}px`;\n        this.element.style.height = `${this.height}px`;\n\n        // set enemy selected\n        this.element.addEventListener('click', () => {\n            this.unSelect();\n            this.select();\n        });\n    }\n\n    select() {\n        // select clicked enemy\n        this.selected = true;\n        if (this.selected) {\n            this.element.classList.add('selected');\n        }\n    }\n\n    unSelect() {\n        // remove all selected class and attribute in order to make only one selection\n        const enemiesArr = this.game.enemies;\n        const selectedEnemy = enemiesArr.find((enemy) => enemy.selected);\n        if (selectedEnemy === undefined) return;\n        selectedEnemy.selected = false;\n        selectedEnemy.element.classList.remove('selected');\n    }\n\n    update(game, deltaTime) {\n        if (this.hasHitCastle(game)) {\n            this.delete(game);\n            game.castle.damage(1);\n            return;\n        }\n\n        // multiply speed by deltaTime in seconds for consistent movement across\n        // different framerates\n        this.pos.x += this.speed * (deltaTime / 1000);\n    }\n\n    draw() {\n        // draw the enemy to different position\n        this.element.style.transform = `translate(${this.pos.x}px, ${this.pos.y}px)`;\n    }\n\n    delete(game) {\n        // remove enemy from game-board\n        this.element.remove();\n        // remove enemy from enemies array\n        game.deleteEnemy(this);\n    }\n\n    hasHitCastle(game) {\n        return this.pos.x >= game.fieldWidth - this.width;\n    }\n}\n\nexport default Enemy;\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n"],"sourceRoot":""}