{"version":3,"sources":["webpack://castle-game/webpack/bootstrap","webpack://castle-game/webpack/runtime/global","webpack://castle-game/webpack/runtime/publicPath","webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/modules/createEnemySpriteSheet.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/questionGenerator.js","webpack://castle-game/./src/modules/scoreHandler.js","webpack://castle-game/./src/modules/defaultSettings.js","webpack://castle-game/./src/modules/domUtils.js","webpack://castle-game/./src/modules/engine.js","webpack://castle-game/./src/modules/questionHistory.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/index.js"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","element","querySelector","height","width","lives","elements","container","getElementById","livesText","setup","draw","damage","amount","onGameOver","textContent","Math","max","sprite","Image","enemySpriteSheet","sprite2","enemySpriteSheet2","sprite3","enemySpriteSheet3","spriteSheets","getRandomSpriteSheet","floor","random","getBackgroundSize","ENEMY_EVENT_TYPES","Object","freeze","HIT_CASTLE","QUESTION_ANSWERED","Enemy","position","x","y","speed","question","fieldWidth","handleSelectEnemy","damageCastle","deleteEnemy","timeSinceLastFrame","frameX","frameWidth","spriteSheetWidth","frameHeight","spriteSheetHeight","getBackgroundPosition","update","deltaTime","enemyElement","createElement","questionElement","classList","add","style","text","backgroundImage","backgroundPosition","backgroundSize","appendChild","addEventListener","events","handleDelete","remove","push","createEnemyEvent","transform","toggleSelect","toggle","addEvent","event","getQuestionInfo","answer","type","answerValue","answerIsCorrect","value","isCorrect","duration","onFinish","autoRestart","timeRemaining","tick","getHumanTimeRemaining","seconds","ceil","minutes","operatorDifficulty","easy","medium","hard","insane","wholeNumberGenerator","number","questionNumberGenerator","difficulty","generateDifficulty","operator","indexOperatorGenerator","operatorSelector","number1","number2","questionText","questionArr","split","num1","Number","num2","answerQuestion","scoreElements","querySelectorAll","score","forEach","addPoints","reset","SPAWN_POINTS","FIRST_LANE","SECOND_LANE","THIRD_LANE","POINTS","CORRECT_ANSWER","WRONG_ANSWER","CASTLE_LIFE_LOST","enemySpeed","enemySpeedIncrement","spawnTimerMs","gameTimerMs","questionDifficulty","castleStartingLives","lastAnswersToShow","hideElement","display","showElement","displayValue","tagName","attributes","el","assign","createTextNode","tableBody","cssClasses","questionHistory","fragment","createDocumentFragment","row","tableRow","questionData","questionAnswer","toString","className","userAnswerData","slice","userAnswerEl","bgColorClass","answerText","answerSpan","iconI","title","createQuestionHistoryUserAnswer","createQuestionHistoryTableRow","replaceChildren","startPage","gamePage","gameOverPage","difficultySelectPage","answerForm","answerInput","gameTimer","startButton","restartButton","pauseButton","difficultyButtons","homeButton","gameOverTitle","settings","timers","constructor","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","bind","timeStamp","requestAnimationFrame","updated","start","stop","cancelAnimationFrame","gameState","keys","key","enemies","enemy","selectedEnemy","spawnEnemy","getRandomSpawnPoint","filter","handleWin","gameOver","handleAnswerSubmit","preventDefault","trim","correctAnswer","enemyEvent","scoreHandler","focus","clickedEnemy","find","currentTarget","titleText","spawnTimer","restart","handlePause","first","second","disabled","handleStartButtonClick","handleDifficultySelect","selectedDifficulty","target","dataset","handleHomeButtonClick","init","button"],"mappings":"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","file":"main.bundle.js","sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 1000,\n};\n\nexport default gameBoard;\n","const castle = {\n    height: 400,\n    width: 137,\n    lives: null,\n    elements: {\n        container: document.getElementById('castle'),\n        livesText: document.getElementById('castle-lives'),\n    },\n\n    setup(lives) {\n        this.lives = lives;\n        this.draw();\n    },\n\n    damage(amount, onGameOver) {\n        this.lives -= amount;\n        this.draw();\n\n        if (this.lives === 0) onGameOver();\n    },\n\n    draw() {\n        this.elements.livesText.textContent = Math.max(0, this.lives);\n    },\n};\n\nexport default castle;\n","import enemySpriteSheet from '../img/enemySpriteSheet.png';\nimport enemySpriteSheet2 from '../img/enemySpriteSheet2.png';\nimport enemySpriteSheet3 from '../img/enemySpriteSheet3.png';\n\nconst sprite = new Image();\nsprite.src = enemySpriteSheet;\n\nconst sprite2 = new Image();\nsprite2.src = enemySpriteSheet2;\n\nconst sprite3 = new Image();\nsprite3.src = enemySpriteSheet3;\n\nconst spriteSheets = [sprite, sprite2, sprite3];\n\nconst scale = 0.2;\nconst spriteSheetWidth = 12060 * scale;\nconst spriteSheetHeight = 490 * scale;\nconst spriteSheetColumns = 18;\nconst spriteSheetRows = 1;\nconst frameWidth = spriteSheetWidth / spriteSheetColumns;\nconst frameHeight = spriteSheetHeight / spriteSheetRows;\nconst frameInterval = 50;\nconst maxFrameX = 17;\nconst frameY = 0;\n\nfunction getRandomSpriteSheet() {\n    return spriteSheets[Math.floor(Math.random() * spriteSheets.length)];\n}\n\nfunction getBackgroundSize() {\n    return `${spriteSheetWidth}px ${spriteSheetHeight}px`;\n}\n\nfunction createEnemySpriteSheet() {\n    let timeSinceLastFrame = 0;\n    let frameX = 0;\n\n    function incFrameX() {\n        if (frameX >= maxFrameX) frameX = 0;\n        else frameX += 1;\n    }\n\n    function getBackgroundPosition() {\n        return `-${frameWidth * frameX}px -${frameHeight * frameY}px`;\n    }\n\n    function update(deltaTime) {\n        timeSinceLastFrame += deltaTime;\n        if (timeSinceLastFrame > frameInterval) {\n            incFrameX();\n            timeSinceLastFrame = 0;\n        }\n    }\n\n    return {\n        sprite: getRandomSpriteSheet(),\n        frameWidth,\n        frameHeight,\n        getRandomSpriteSheet,\n        getBackgroundPosition,\n        getBackgroundSize,\n        update,\n    };\n}\n\nexport default createEnemySpriteSheet;\n","import createEnemySpriteSheet from './createEnemySpriteSheet';\n\nconst ENEMY_EVENT_TYPES = Object.freeze({\n    HIT_CASTLE: 0,\n    QUESTION_ANSWERED: 1,\n});\n\nfunction Enemy({\n    position: { x, y },\n    speed,\n    question,\n    fieldWidth,\n    handleSelectEnemy,\n    damageCastle,\n    deleteEnemy,\n} = {}) {\n    const enemySpriteSheet = createEnemySpriteSheet();\n    const width = enemySpriteSheet.frameWidth;\n    const height = enemySpriteSheet.frameHeight;\n    const position = { x, y };\n    const element = createElement();\n    const events = [];\n\n    // PRIVATE FUNCTIONS\n\n    function createElement() {\n        const enemyElement = document.createElement('div');\n        const questionElement = document.createElement('div');\n\n        // set enemy element styles\n        enemyElement.classList.add('enemy');\n        enemyElement.style.width = `${width}px`;\n        enemyElement.style.height = `${height}px`;\n\n        // set question element styles and text\n        questionElement.classList.add('enemy-question');\n        questionElement.textContent = question.text;\n\n        // sprite styles\n        enemyElement.style.backgroundImage = `url(${enemySpriteSheet.sprite.src})`;\n        enemyElement.style.backgroundPosition =\n            enemySpriteSheet.getBackgroundPosition();\n        enemyElement.style.backgroundSize =\n            enemySpriteSheet.getBackgroundSize();\n\n        enemyElement.appendChild(questionElement);\n\n        enemyElement.addEventListener('click', handleSelectEnemy);\n\n        return enemyElement;\n    }\n\n    function hasHitCastle() {\n        return position.x >= fieldWidth - width / 2;\n    }\n\n    // PUBLIC FUNCTIONS\n\n    function update(deltaTime) {\n        if (hasHitCastle()) {\n            handleDelete();\n            events.push(createEnemyEvent(ENEMY_EVENT_TYPES.HIT_CASTLE));\n            damageCastle(1);\n            return;\n        }\n\n        // multiply speed by deltaTime in seconds\n        // for consistent movement across different framerates\n        position.x += speed * (deltaTime / 1000);\n\n        enemySpriteSheet.update(deltaTime);\n    }\n\n    function draw() {\n        // draw the enemy to different position\n        element.style.transform = `translate(${position.x}px, ${position.y}px)`;\n        element.style.backgroundPosition =\n            enemySpriteSheet.getBackgroundPosition();\n    }\n\n    function handleDelete() {\n        deleteEnemy(element);\n        element.remove();\n    }\n\n    function toggleSelect() {\n        element.classList.toggle('selected');\n    }\n\n    function addEvent(event) {\n        events.push(event);\n    }\n\n    function getQuestionInfo() {\n        return {\n            text: question.text,\n            answer: question.answer,\n            events,\n        };\n    }\n\n    return Object.freeze({\n        update,\n        draw,\n        handleDelete,\n        toggleSelect,\n        addEvent,\n        getQuestionInfo,\n        question,\n        get element() {\n            return element;\n        },\n    });\n}\n\nfunction createEnemyEvent(type, answerValue = null, answerIsCorrect = false) {\n    return {\n        type,\n        answer: {\n            value: answerValue,\n            isCorrect: answerIsCorrect,\n        },\n    };\n}\n\nexport { Enemy as default, createEnemyEvent, ENEMY_EVENT_TYPES };\n","function Timer(duration, onFinish, { autoRestart = true } = {}) {\n    let timeRemaining = duration;\n\n    function restart() {\n        timeRemaining = duration;\n    }\n\n    function handleComplete() {\n        onFinish();\n        if (autoRestart) restart();\n    }\n\n    function tick(deltaTime) {\n        timeRemaining = Math.max(0, timeRemaining - deltaTime);\n\n        if (timeRemaining <= 1) handleComplete();\n    }\n\n    // converts time in ms to mm:ss format\n    function getHumanTimeRemaining() {\n        const seconds = Math.ceil(timeRemaining / 1000) % 60;\n        const minutes = Math.floor(Math.ceil(timeRemaining / 1000) / 60);\n\n        const formatedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n\n        return `${formattedMinutes}:${formatedSeconds}`;\n    }\n\n    return Object.freeze({\n        tick,\n        getHumanTimeRemaining,\n    });\n}\n\nexport default Timer;\n","// \\u00D7 is the unicode symbol for multiplication and \\u00F7 for division in Javascript.\n\nconst operatorDifficulty = {\n    easy: ['+', '-'],\n    medium: ['+', '-', '\\u00D7'],\n    hard: ['+', '-', '\\u00D7'],\n    insane: ['+', '-', '\\u00D7', '\\u00F7'],\n};\n\nconst wholeNumberGenerator = (number) => Math.floor(Math.random() * number);\n\n// Change difficulty here as this is the factor of multiplication that determines range of numbers.\nconst generateDifficulty = (difficulty) => {\n    switch (difficulty) {\n        case 'easy':\n            return 5;\n        case 'medium':\n            return 10;\n        case 'hard':\n            return 30;\n        case 'insane':\n            return 100;\n        default:\n            return 5;\n    }\n};\n\nconst indexOperatorGenerator = (difficulty) =>\n    wholeNumberGenerator(operatorDifficulty[difficulty].length);\n\nconst operatorSelector = (difficulty) =>\n    operatorDifficulty[difficulty][indexOperatorGenerator(difficulty)];\n\nconst questionNumberGenerator = (difficulty) =>\n    wholeNumberGenerator(generateDifficulty(difficulty)) + 1;\n\nconst answerQuestion = (question) => {\n    const questionArr = question.split(' ');\n    const num1 = Number(questionArr[0]);\n    const operator = questionArr[1];\n    const num2 = Number(questionArr[2]);\n    let answer;\n    if (operator === '+') {\n        answer = num1 + num2;\n    } else if (operator === '-') {\n        answer = num1 - num2;\n    } else if (operator === '\\u00D7') {\n        answer = num1 * num2;\n    } else {\n        answer = num1 / num2;\n    }\n    return answer;\n};\n\nconst questionGenerator = (difficulty) => {\n    const operator = operatorSelector(difficulty);\n    let number1 = questionNumberGenerator(difficulty);\n    let number2 = questionNumberGenerator(difficulty);\n    // Functions that will determine question difficulty\n    while (operator === '\\u00F7') {\n        if (number1 % number2 !== 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n    while (operator === '-') {\n        if (number1 - number2 < 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '\\u00D7') {\n        if (number1 * number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '+') {\n        if (number1 + number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    const questionText = `${number1} ${operator} ${number2}`;\n    const answer = answerQuestion(questionText);\n\n    return {\n        text: questionText,\n        answer,\n    };\n};\n\nexport default questionGenerator;\n","const scoreElements = document.querySelectorAll('[data-score-display]');\n\nlet score = 0;\n\nfunction draw() {\n    scoreElements.forEach((element) => {\n        const el = element;\n        el.textContent = score;\n    });\n}\n\nfunction addPoints(amount) {\n    if (amount < 0) {\n        score = Math.max(0, score + amount);\n    } else {\n        score += amount;\n    }\n    draw();\n}\n\nfunction reset() {\n    score = 0;\n    draw();\n}\n\nexport default Object.freeze({ addPoints, reset });\n","const DEFAULT_SETTINGS = {\n    SPAWN_POINTS: {\n        FIRST_LANE: { x: -100, y: 35 },\n        SECOND_LANE: { x: -100, y: 135 },\n        THIRD_LANE: { x: -100, y: 235 },\n    },\n    POINTS: {\n        CORRECT_ANSWER: 10,\n        WRONG_ANSWER: -2,\n        CASTLE_LIFE_LOST: -10,\n    },\n    enemySpeed: 28,\n    enemySpeedIncrement: 1,\n    spawnTimerMs: 3500,\n    gameTimerMs: 300000,\n    questionDifficulty: 'medium',\n    castleStartingLives: 3,\n    lastAnswersToShow: 5,\n};\n\nexport default DEFAULT_SETTINGS;\n","function hideElement(element) {\n    const el = element;\n    el.style.display = 'none';\n}\n\nfunction showElement(element, displayValue) {\n    const el = element;\n    el.style.display = displayValue;\n}\n\nfunction createElement(tagName, { attributes = {}, text } = {}) {\n    const el = document.createElement(tagName);\n\n    Object.assign(el, attributes);\n\n    if (text) el.appendChild(document.createTextNode(text));\n\n    return el;\n}\n\nexport { hideElement, showElement, createElement };\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n","import { createElement } from './domUtils';\nimport { ENEMY_EVENT_TYPES } from './enemy';\n\nconst tableBody = document.querySelector('#question-history tbody');\n\nconst cssClasses = {\n    answer: 'question-history-answer',\n    wrongAnswer: 'question-history-wrong-answer',\n    correctAnswer: 'question-history-correct-answer',\n    hitCastleIcon: 'fas fa-heart-broken',\n};\n\nfunction createQuestionHistoryUserAnswer(event) {\n    const bgColorClass = event.answer.isCorrect\n        ? cssClasses.correctAnswer\n        : cssClasses.wrongAnswer;\n\n    const answerText =\n        event.type === ENEMY_EVENT_TYPES.HIT_CASTLE ? '' : event.answer.value;\n\n    const answerSpan = createElement('span', {\n        attributes: {\n            className: `${cssClasses.answer} ${bgColorClass}`,\n        },\n        text: answerText,\n    });\n\n    if (event.type === ENEMY_EVENT_TYPES.HIT_CASTLE) {\n        const iconI = createElement('i', {\n            attributes: {\n                className: cssClasses.hitCastleIcon,\n                title: 'Enemy Hit Castle',\n            },\n        });\n        answerSpan.appendChild(iconI);\n    }\n\n    return answerSpan;\n}\n\nfunction createQuestionHistoryTableRow(question, lastAnswersToShow) {\n    const tableRow = createElement('tr');\n    const questionData = createElement('td', { text: `${question.text} = ` });\n    const questionAnswer = createElement('span', {\n        text: question.answer.toString(),\n        attributes: {\n            className: `${cssClasses.answer} ${cssClasses.correctAnswer}`,\n        },\n    });\n    const userAnswerData = createElement('td');\n\n    question.events.slice(-lastAnswersToShow).forEach((event) => {\n        const userAnswerEl = createQuestionHistoryUserAnswer(event);\n        userAnswerData.appendChild(userAnswerEl);\n    });\n\n    questionData.appendChild(questionAnswer);\n    tableRow.appendChild(questionData);\n    tableRow.appendChild(userAnswerData);\n\n    return tableRow;\n}\n\nfunction populateQuestionHistory(questionHistory, lastAnswersToShow) {\n    const fragment = document.createDocumentFragment();\n\n    questionHistory.forEach((question) => {\n        const row = createQuestionHistoryTableRow(question, lastAnswersToShow);\n        fragment.appendChild(row);\n    });\n\n    tableBody.replaceChildren(fragment);\n}\n\nexport default populateQuestionHistory;\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy, { ENEMY_EVENT_TYPES, createEnemyEvent } from './enemy';\nimport Timer from './timer';\nimport questionGenerator from './questionGenerator';\nimport scoreHandler from './scoreHandler';\nimport DEFAULT_SETTINGS from './defaultSettings';\nimport { hideElement, showElement } from './domUtils';\nimport Engine from './engine';\nimport populateQuestionHistory from './questionHistory';\n\nconst GAMESTATES = {\n    MENU: 0,\n    RUNNING: 1,\n    GAMEOVER: 2,\n    PAUSED: 3,\n};\n\nconst startPage = document.querySelector('#start-page');\nconst gamePage = document.querySelector('#game-page');\nconst gameOverPage = document.querySelector('#game-over-page');\nconst difficultySelectPage = document.querySelector('#difficulty-select-page');\nconst answerForm = document.querySelector('.answer-form');\nconst answerInput = document.querySelector('#answer-input');\nconst gameTimer = document.querySelector('#game-timer');\nconst startButton = document.querySelector('.start-button');\nconst restartButton = document.querySelector('#restart-button');\nconst pauseButton = document.querySelector('.pause-button');\nconst difficultyButtons = document.querySelectorAll('[data-difficulty');\nconst homeButton = document.querySelector('#home-button');\nconst gameOverTitle = document.querySelector('#game-over-title');\n\nconst settings = { ...DEFAULT_SETTINGS };\nconst timers = {};\nconst fieldWidth = gameBoard.width - (castle.width - 70);\nconst engine = new Engine(update, draw);\n\nlet gameState = GAMESTATES.MENU;\nlet selectedEnemy = null;\nlet enemies = [];\nlet questionHistory = [];\n\n// PRIVATE FUNCTIONS\n\nfunction spawnEnemy() {\n    const enemy = Enemy({\n        position: getRandomSpawnPoint(),\n        speed: settings.enemySpeed,\n        question: questionGenerator(settings.questionDifficulty),\n        fieldWidth,\n        handleSelectEnemy,\n        damageCastle,\n        deleteEnemy,\n    });\n    settings.enemySpeed += settings.enemySpeedIncrement;\n    gameBoard.element.appendChild(enemy.element);\n    enemies.push(enemy);\n}\n\nfunction getRandomSpawnPoint() {\n    // randomly choose an object keys in the POSITION object\n    const keys = Object.keys(settings.SPAWN_POINTS);\n    return settings.SPAWN_POINTS[keys[Math.floor(Math.random() * keys.length)]];\n}\n\nfunction deleteEnemy(element) {\n    enemies = enemies.filter((enemy) => {\n        if (enemy.element !== element) return true;\n\n        if (selectedEnemy === enemy) {\n            selectedEnemy = null;\n        }\n\n        questionHistory.push(enemy.getQuestionInfo());\n\n        return false;\n    });\n}\n\nfunction handleWin() {\n    gameOver('You Win!');\n}\n\nfunction initialiseTimers() {\n    // spawn enemy every 2.5 seconds\n    timers.spawnTimer = Timer(settings.spawnTimerMs, spawnEnemy);\n\n    // end game after 300000 ms (5 minutes)\n    timers.gameTimer = Timer(settings.gameTimerMs, handleWin, {\n        autoRestart: false,\n    });\n}\n\nfunction handleAnswerSubmit(event) {\n    event.preventDefault();\n\n    if (!selectedEnemy || answerInput.value.trim() === '') return;\n\n    const correctAnswer = selectedEnemy.question.answer.toString();\n\n    const enemyEvent = createEnemyEvent(\n        ENEMY_EVENT_TYPES.QUESTION_ANSWERED,\n        answerInput.value\n    );\n\n    selectedEnemy.addEvent(enemyEvent);\n\n    if (enemyEvent.answer.value === correctAnswer) {\n        enemyEvent.answer.isCorrect = true;\n        selectedEnemy.handleDelete();\n        selectedEnemy = null;\n        scoreHandler.addPoints(settings.POINTS.CORRECT_ANSWER);\n    } else {\n        enemyEvent.answer.isCorrect = false;\n        scoreHandler.addPoints(settings.POINTS.WRONG_ANSWER);\n    }\n\n    answerInput.value = '';\n}\n\nfunction handleSelectEnemy(event) {\n    answerInput.focus();\n\n    const clickedEnemy = enemies.find(\n        (enemy) => enemy.element === event.currentTarget\n    );\n\n    if (clickedEnemy === selectedEnemy) return;\n\n    if (selectedEnemy) selectedEnemy.toggleSelect();\n\n    clickedEnemy.toggleSelect();\n\n    selectedEnemy = clickedEnemy;\n}\n\nfunction damageCastle(amount) {\n    scoreHandler.addPoints(settings.POINTS.CASTLE_LIFE_LOST);\n    castle.damage(amount, gameOver);\n}\n\nfunction gameOver(titleText) {\n    gameState = GAMESTATES.GAMEOVER;\n    populateQuestionHistory(questionHistory, settings.lastAnswersToShow);\n    hideElement(gamePage);\n    gameOverTitle.textContent = titleText || 'Game Over';\n    showElement(gameOverPage, 'flex');\n}\n\nfunction reset() {\n    settings.enemySpeed = DEFAULT_SETTINGS.enemySpeed;\n    initialiseTimers();\n    scoreHandler.reset();\n    answerInput.value = '';\n    castle.setup(settings.castleStartingLives);\n    enemies.forEach((enemy) => enemy.handleDelete());\n    questionHistory = [];\n}\n\nfunction start(selectedDifficulty) {\n    reset();\n    settings.questionDifficulty = selectedDifficulty;\n    gameState = GAMESTATES.RUNNING;\n    engine.start();\n}\n\nfunction restart() {\n    reset();\n    hideElement(gameOverPage);\n    showElement(gamePage, 'flex');\n    gameState = GAMESTATES.RUNNING;\n}\n\nfunction pause() {\n    gameState = GAMESTATES.PAUSED;\n    answerInput.disabled = true;\n    enemies.forEach((enemy) => enemy.element.classList.add('not-clickable'));\n}\n\nfunction unPause() {\n    gameState = GAMESTATES.RUNNING;\n    answerInput.disabled = false;\n    enemies.forEach((enemy) => enemy.element.classList.remove('not-clickable'));\n}\n\nfunction update(deltaTime) {\n    if (gameState !== GAMESTATES.RUNNING) return;\n\n    Object.keys(timers).forEach((key) => timers[key].tick(deltaTime));\n\n    enemies.forEach((enemy) => enemy.update(deltaTime));\n}\n\nfunction draw() {\n    gameTimer.textContent = timers.gameTimer.getHumanTimeRemaining();\n\n    enemies.forEach((enemy) => enemy.draw());\n}\n\nfunction handlePause() {\n    const pauseButtonText = ['Continue', 'Pause'];\n    const [first, second] = pauseButtonText;\n    if (gameState === GAMESTATES.RUNNING) {\n        pause();\n        engine.stop();\n        pauseButton.textContent = first;\n    } else if (gameState === GAMESTATES.PAUSED) {\n        engine.start();\n        unPause();\n        pauseButton.textContent = second;\n    }\n}\n\nfunction handleStartButtonClick() {\n    hideElement(startPage);\n    showElement(difficultySelectPage, 'flex');\n}\n\nfunction handleDifficultySelect(event) {\n    const selectedDifficulty = event.target.dataset.difficulty;\n    hideElement(difficultySelectPage);\n    showElement(gamePage, 'flex');\n    start(selectedDifficulty);\n}\n\nfunction handleHomeButtonClick() {\n    if (gameState === GAMESTATES.PAUSED) handlePause();\n    engine.stop();\n    gameState = GAMESTATES.MENU;\n    hideElement(gamePage);\n    showElement(startPage, 'flex');\n}\n\n// PUBLIC FUNCTIONS\n\nfunction init() {\n    startButton.addEventListener('click', handleStartButtonClick);\n    restartButton.addEventListener('click', restart);\n    pauseButton.addEventListener('click', handlePause);\n    answerForm.addEventListener('submit', handleAnswerSubmit);\n    difficultyButtons.forEach((button) =>\n        button.addEventListener('click', handleDifficultySelect)\n    );\n    homeButton.addEventListener('click', handleHomeButtonClick);\n}\n\nexport default Object.freeze({\n    init,\n});\n","import './styles/styles.css';\nimport game from './modules/game';\n\ngame.init();\n"],"sourceRoot":""}