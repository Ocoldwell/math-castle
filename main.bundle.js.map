{"version":3,"sources":["webpack://castle-game/./src/modules/gameBoard.js","webpack://castle-game/./src/modules/castle.js","webpack://castle-game/./src/modules/timer.js","webpack://castle-game/./src/modules/questionGenerator.js","webpack://castle-game/./src/modules/scoreHandler.js","webpack://castle-game/./src/modules/game.js","webpack://castle-game/./src/index.js","webpack://castle-game/./src/modules/enemy.js","webpack://castle-game/./src/modules/engine.js"],"names":["element","document","querySelector","height","width","lives","elements","container","getElementById","livesText","game","undefined","setup","this","draw","damage","amount","gameOver","textContent","Math","max","duration","onFinish","autoRestart","timeRemaining","Object","freeze","tick","deltaTime","getHumanTimeRemaining","seconds","ceil","minutes","floor","operatorDifficulty","easy","medium","hard","insane","wholeNumberGenerator","number","random","questionNumberGenerator","difficulty","generateDifficulty","operator","length","indexOperatorGenerator","operatorSelector","number1","number2","questionText","text","answer","question","questionArr","split","num1","Number","num2","answerQuestion","scoreElements","querySelectorAll","score","forEach","addPoints","reset","POSITION","firstLane","secondLane","thirdLane","enemySpeed","startPage","gamePage","gameOverPage","constructor","gameBoard","castle","answerForm","answerInput","gameTimer","wrongAnswersEl","fieldWidth","enemies","selectedEnemy","timers","gameState","wrongAnswers","update","bind","spawnEnemy","handleAnswerSubmit","handleSelectEnemy","start","scoreHandler","addEventListener","initialiseTimers","style","display","pause","enemy","classList","add","continue","remove","keys","key","countDownTimer","position","x","y","speed","enemyElement","createElement","questionElement","appendChild","handleDelete","deleteEnemy","damageCastle","transform","toggleSelect","toggle","randomLane","push","filter","value","spawnTimer","event","preventDefault","trim","correctAnswer","toString","focus","clickedEnemy","find","currentTarget","render","running","rafID","accumulatedTime","currentTime","timeStep","cycle","timeStamp","requestAnimationFrame","updated","stop","cancelAnimationFrame","startButton","restartButton","pauseButton","startGame","first","second"],"mappings":"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","file":"main.bundle.js","sourcesContent":["const gameBoard = {\n    element: document.querySelector('#game-board'),\n    height: 400,\n    width: 900,\n};\n\nexport default gameBoard;\n","const castle = {\n    height: 400,\n    width: 200,\n    lives: null,\n    elements: {\n        container: document.getElementById('castle'),\n        livesText: document.getElementById('castle-lives'),\n    },\n    game: undefined,\n\n    setup(game, lives) {\n        this.game = game;\n        this.lives = lives;\n        this.draw();\n    },\n\n    damage(amount) {\n        this.lives -= amount;\n        this.draw();\n\n        if (this.lives === 0) this.game.gameOver();\n    },\n\n    draw() {\n        this.elements.livesText.textContent = Math.max(0, this.lives);\n    },\n};\n\nexport default castle;\n","function Timer(duration, onFinish, { autoRestart = true } = {}) {\n    let timeRemaining = duration;\n\n    function restart() {\n        timeRemaining = duration;\n    }\n\n    function handleComplete() {\n        onFinish();\n        if (autoRestart) restart();\n    }\n\n    function tick(deltaTime) {\n        timeRemaining = Math.max(0, timeRemaining - deltaTime);\n\n        if (timeRemaining <= 1) handleComplete();\n    }\n\n    // converts time in ms to mm:ss format\n    function getHumanTimeRemaining() {\n        const seconds = Math.ceil(timeRemaining / 1000) % 60;\n        const minutes = Math.floor(Math.ceil(timeRemaining / 1000) / 60);\n\n        const formatedSeconds = seconds < 10 ? `0${seconds}` : seconds;\n        const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;\n\n        return `${formattedMinutes}:${formatedSeconds}`;\n    }\n\n    return Object.freeze({\n        tick,\n        getHumanTimeRemaining,\n    });\n}\n\nexport default Timer;\n","// \\u00D7 is the unicode symbol for multiplication and \\u00F7 for division in Javascript.\n\nconst operatorDifficulty = {\n    easy: ['+', '-'],\n    medium: ['+', '-', '\\u00D7'],\n    hard: ['+', '-', '\\u00D7'],\n    insane: ['+', '-', '\\u00D7', '\\u00F7'],\n};\n\nconst wholeNumberGenerator = (number) => Math.floor(Math.random() * number);\n\n// Change difficulty here as this is the factor of multiplication that determines range of numbers.\nconst generateDifficulty = (difficulty) => {\n    switch (difficulty) {\n        case 'easy':\n            return 5;\n        case 'medium':\n            return 10;\n        case 'hard':\n            return 30;\n        case 'insane':\n            return 100;\n        default:\n            return 5;\n    }\n};\n\nconst indexOperatorGenerator = (difficulty) =>\n    wholeNumberGenerator(operatorDifficulty[difficulty].length);\n\nconst operatorSelector = (difficulty) =>\n    operatorDifficulty[difficulty][indexOperatorGenerator(difficulty)];\n\nconst questionNumberGenerator = (difficulty) =>\n    wholeNumberGenerator(generateDifficulty(difficulty)) + 1;\n\nconst answerQuestion = (question) => {\n    const questionArr = question.split(' ');\n    const num1 = Number(questionArr[0]);\n    const operator = questionArr[1];\n    const num2 = Number(questionArr[2]);\n    let answer;\n    if (operator === '+') {\n        answer = num1 + num2;\n    } else if (operator === '-') {\n        answer = num1 - num2;\n    } else if (operator === '\\u00D7') {\n        answer = num1 * num2;\n    } else {\n        answer = num1 / num2;\n    }\n    return answer;\n};\n\nconst questionGenerator = (difficulty) => {\n    const operator = operatorSelector(difficulty);\n    let number1 = questionNumberGenerator(difficulty);\n    let number2 = questionNumberGenerator(difficulty);\n    // Functions that will determine question difficulty\n    while (operator === '\\u00F7') {\n        if (number1 % number2 !== 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n    while (operator === '-') {\n        if (number1 - number2 < 0) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '\\u00D7') {\n        if (number1 * number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    while (operator === '+') {\n        if (number1 + number2 > 150) {\n            number1 = questionNumberGenerator(difficulty);\n            number2 = questionNumberGenerator(difficulty);\n        } else {\n            break;\n        }\n    }\n\n    const questionText = `${number1} ${operator} ${number2}`;\n    const answer = answerQuestion(questionText);\n\n    return {\n        text: questionText,\n        answer,\n    };\n};\n\nexport default questionGenerator;\n","const scoreElements = document.querySelectorAll('[data-score-display]');\n\nlet score = 0;\n\nfunction draw() {\n    scoreElements.forEach((element) => {\n        const el = element;\n        el.textContent = `Score: ${score}`;\n    });\n}\n\nfunction addPoints(amount) {\n    if (amount < 0) {\n        score = Math.max(0, score + amount);\n    } else {\n        score += amount;\n    }\n    draw();\n}\n\nfunction reset() {\n    score = 0;\n    draw();\n}\n\nexport default Object.freeze({ addPoints, reset });\n","import gameBoard from './gameBoard';\nimport castle from './castle';\nimport Enemy from './enemy';\nimport Timer from './timer';\nimport questionGenerator from './questionGenerator';\nimport scoreHandler from './scoreHandler';\n\nexport const GAMESTATE = {\n    MENU: 0,\n    RUNNING: 1,\n    GAMEOVER: 2,\n    PAUSED: 3,\n};\n\nconst POSITION = {\n    firstLane: 50,\n    secondLane: 165,\n    thirdLane: 280,\n};\n\nconst POINTS = {\n    CORRECT_ANSWER: 10,\n    WRONG_ANSWER: -2,\n    CASTLE_LIFE_LOST: -10,\n};\n\nlet enemySpeed = 40;\nconst startPage = document.getElementById('start-page');\nconst gamePage = document.getElementById('game-page');\nconst gameOverPage = document.getElementById('game-over-page');\n\nclass Game {\n    constructor() {\n        this.gameBoard = gameBoard;\n        this.castle = castle;\n        this.answerForm = document.querySelector('.answer-form');\n        this.answerInput = document.querySelector('#answer-input');\n        this.gameTimer = document.querySelector('#game-timer');\n        this.wrongAnswersEl = document.querySelector(\n            '#game-over-wrong-answers'\n        );\n        // width of area enemy can move in\n        this.fieldWidth = gameBoard.width - castle.width;\n        this.enemies = [];\n        this.selectedEnemy = null;\n        this.timers = {};\n        this.gameState = GAMESTATE.MENU;\n        this.wrongAnswers = 0;\n\n        // bind methods 'this' to Game class\n        this.update = this.update.bind(this);\n        this.draw = this.draw.bind(this);\n        this.spawnEnemy = this.spawnEnemy.bind(this);\n        this.handleAnswerSubmit = this.handleAnswerSubmit.bind(this);\n        this.gameOver = this.gameOver.bind(this);\n        this.handleSelectEnemy = this.handleSelectEnemy.bind(this);\n    }\n\n    start() {\n        scoreHandler.reset();\n        this.wrongAnswers = 0;\n        this.castle.setup(this, 3);\n        this.answerForm.addEventListener('submit', this.handleAnswerSubmit);\n        this.gameState = GAMESTATE.RUNNING;\n        this.initialiseTimers();\n        // hide start page\n        startPage.style.display = 'none';\n        gameOverPage.style.display = 'none';\n        gamePage.style.display = 'flex';\n    }\n\n    pause() {\n        this.gameState = GAMESTATE.PAUSED;\n        this.enemies.forEach((enemy) =>\n            enemy.elements.enemy.classList.add('not-clickable')\n        );\n    }\n\n    continue() {\n        this.gameState = GAMESTATE.RUNNING;\n        this.enemies.forEach((enemy) =>\n            enemy.elements.enemy.classList.remove('not-clickable')\n        );\n    }\n\n    update(deltaTime) {\n        if (this.gameState !== GAMESTATE.RUNNING) return;\n\n        Object.keys(this.timers).forEach((key) =>\n            this.timers[key].tick(deltaTime)\n        );\n\n        this.enemies.forEach((enemy) => enemy.update(deltaTime));\n    }\n\n    draw() {\n        this.gameTimer.textContent =\n            this.timers.countDownTimer.getHumanTimeRemaining();\n\n        this.enemies.forEach((enemy) => enemy.draw());\n    }\n\n    spawnEnemy() {\n        const enemy = Enemy({\n            position: {\n                x: 0,\n                y: this.randomLane(),\n            },\n            speed: enemySpeed,\n            question: questionGenerator('insane'),\n            game: this,\n        });\n        enemySpeed += 3;\n        this.gameBoard.element.appendChild(enemy.element);\n        this.enemies.push(enemy);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    randomLane() {\n        // randomly choose an object keys in the POSITION object\n        const keys = Object.keys(POSITION);\n        return POSITION[keys[Math.floor(Math.random() * keys.length)]];\n    }\n\n    deleteEnemy(element) {\n        this.enemies = this.enemies.filter((enemy) => {\n            if (enemy.element !== element) return true;\n\n            if (this.selectedEnemy === enemy) {\n                this.selectedEnemy = null;\n            }\n\n            return false;\n        });\n    }\n\n    gameOver() {\n        this.gameState = GAMESTATE.GAMEOVER;\n        this.wrongAnswersEl.textContent = `Wrong Answers: ${this.wrongAnswers}`;\n        gamePage.style.display = 'none';\n        gameOverPage.style.display = 'flex';\n        this.enemies.forEach((enemy) => {\n            enemy.handleDelete();\n        });\n        this.answerInput.value = '';\n        enemySpeed = 40;\n    }\n\n    initialiseTimers() {\n        // spawn enemy every 2.5 seconds\n        this.timers.spawnTimer = Timer(2500, this.spawnEnemy);\n\n        // end game after 300000 ms (5 minutes)\n        this.timers.countDownTimer = Timer(300000, this.gameOver, {\n            autoRestart: false,\n        });\n    }\n\n    handleAnswerSubmit(event) {\n        event.preventDefault();\n\n        if (!this.selectedEnemy || this.answerInput.value.trim() === '') return;\n\n        const correctAnswer = this.selectedEnemy.question.answer.toString();\n        const userAnswer = this.answerInput.value;\n\n        if (userAnswer === correctAnswer) {\n            this.selectedEnemy.handleDelete();\n            this.selectedEnemy = null;\n            scoreHandler.addPoints(POINTS.CORRECT_ANSWER);\n        } else {\n            scoreHandler.addPoints(POINTS.WRONG_ANSWER);\n            this.wrongAnswers += 1;\n        }\n\n        this.answerInput.value = '';\n    }\n\n    handleSelectEnemy(event) {\n        this.answerInput.focus();\n\n        const clickedEnemy = this.enemies.find(\n            (enemy) => enemy.element === event.currentTarget\n        );\n\n        if (clickedEnemy === this.selectedEnemy) return;\n\n        if (this.selectedEnemy) this.selectedEnemy.toggleSelect();\n\n        clickedEnemy.toggleSelect();\n\n        this.selectedEnemy = clickedEnemy;\n    }\n\n    damageCastle(amount) {\n        scoreHandler.addPoints(POINTS.CASTLE_LIFE_LOST);\n        this.castle.damage(amount);\n    }\n}\n\nexport default Game;\n","import './styles/styles.css';\nimport Game, { GAMESTATE } from './modules/game';\nimport Engine from './modules/engine';\n\nconst game = new Game();\nconst engine = new Engine(game.update, game.draw);\n\nconst startButton = document.querySelector('.start-button');\nconst restartButton = document.querySelector('.restart-button');\nconst pauseButton = document.querySelector('.pause-button');\n\nfunction startGame() {\n    engine.start();\n    game.start();\n}\n\nfunction pauseGame() {\n    const pauseButtonText = ['Continue', 'Pause'];\n    const [first, second] = pauseButtonText;\n    if (game.gameState === GAMESTATE.RUNNING) {\n        game.pause();\n        engine.stop();\n        pauseButton.textContent = first;\n    } else if (game.gameState === GAMESTATE.PAUSED) {\n        engine.start();\n        game.continue();\n        pauseButton.textContent = second;\n    }\n}\n\nstartButton.addEventListener('click', startGame);\nrestartButton.addEventListener('click', startGame);\npauseButton.addEventListener('click', pauseGame);\n","function Enemy({ position: { x, y }, speed, question, game } = {}) {\n    const width = 50;\n    const height = 50;\n    const position = { x, y };\n    const element = createElement();\n\n    // PRIVATE FUNCTIONS\n\n    function createElement() {\n        const enemyElement = document.createElement('div');\n        const questionElement = document.createElement('div');\n\n        // set enemy element styles\n        enemyElement.classList.add('enemy');\n        enemyElement.style.width = `${width}px`;\n        enemyElement.style.height = `${height}px`;\n\n        // set question element styles and text\n        questionElement.classList.add('enemy-question');\n        questionElement.textContent = question.text;\n\n        enemyElement.appendChild(questionElement);\n\n        enemyElement.addEventListener('click', game.handleSelectEnemy);\n\n        return enemyElement;\n    }\n\n    function hasHitCastle() {\n        return position.x >= game.fieldWidth - width;\n    }\n\n    // PUBLIC FUNCTIONS\n\n    function update(deltaTime) {\n        if (hasHitCastle()) {\n            handleDelete();\n            game.damageCastle(1);\n            return;\n        }\n        // multiply speed by deltaTime in seconds\n        // for consistent movement across different framerates\n        position.x += speed * (deltaTime / 1000);\n    }\n\n    function draw() {\n        // draw the enemy to different position\n        element.style.transform = `translate(${position.x}px, ${position.y}px)`;\n    }\n\n    function handleDelete() {\n        game.deleteEnemy(element);\n        element.remove();\n    }\n\n    function toggleSelect() {\n        element.classList.toggle('selected');\n    }\n\n    return Object.freeze({\n        update,\n        draw,\n        handleDelete,\n        toggleSelect,\n        question,\n        get element() {\n            return element;\n        },\n    });\n}\n\nexport default Enemy;\n","class Engine {\n    constructor(update, render) {\n        this.running = false;\n        this.rafID = undefined;\n\n        this.update = update;\n        this.draw = render;\n\n        this.accumulatedTime = 0;\n        this.currentTime = 0;\n        this.timeStep = 1000 / 60;\n\n        this.cycle = this.cycle.bind(this);\n    }\n\n    cycle(timeStamp) {\n        this.rafID = requestAnimationFrame(this.cycle);\n\n        this.accumulatedTime += timeStamp - this.currentTime;\n        this.currentTime = timeStamp;\n\n        let updated = false;\n\n        if (this.accumulatedTime > 60) {\n            this.accumulatedTime = this.timeStep;\n        }\n\n        while (this.accumulatedTime >= this.timeStep) {\n            this.update(this.timeStep);\n\n            updated = true;\n\n            this.accumulatedTime -= this.timeStep;\n        }\n\n        if (updated) this.draw();\n    }\n\n    start() {\n        this.running = true;\n        this.rafID = requestAnimationFrame(this.cycle);\n    }\n\n    stop() {\n        this.running = false;\n        cancelAnimationFrame(this.rafID);\n    }\n}\n\nexport default Engine;\n"],"sourceRoot":""}